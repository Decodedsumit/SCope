/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.scope.AUCThreshold', null, global);
goog.exportSymbol('proto.scope.Annotation', null, global);
goog.exportSymbol('proto.scope.CellAUCValuesByFeaturesReply', null, global);
goog.exportSymbol('proto.scope.CellAUCValuesByFeaturesRequest', null, global);
goog.exportSymbol('proto.scope.CellAnnotations', null, global);
goog.exportSymbol('proto.scope.CellClusters', null, global);
goog.exportSymbol('proto.scope.CellColorByFeaturesReply', null, global);
goog.exportSymbol('proto.scope.CellColorByFeaturesRequest', null, global);
goog.exportSymbol('proto.scope.CellIDsReply', null, global);
goog.exportSymbol('proto.scope.CellIDsRequest', null, global);
goog.exportSymbol('proto.scope.CellMetaData', null, global);
goog.exportSymbol('proto.scope.CellMetaDataReply', null, global);
goog.exportSymbol('proto.scope.CellMetaDataRequest', null, global);
goog.exportSymbol('proto.scope.ClusterAnnotation', null, global);
goog.exportSymbol('proto.scope.ClusterMarkerMetric', null, global);
goog.exportSymbol('proto.scope.Clustering', null, global);
goog.exportSymbol('proto.scope.ColorLegend', null, global);
goog.exportSymbol('proto.scope.Coordinate', null, global);
goog.exportSymbol('proto.scope.CoordinatesReply', null, global);
goog.exportSymbol('proto.scope.CoordinatesRequest', null, global);
goog.exportSymbol('proto.scope.DeleteUserFileReply', null, global);
goog.exportSymbol('proto.scope.DeleteUserFileRequest', null, global);
goog.exportSymbol('proto.scope.DownloadSubLoomReply', null, global);
goog.exportSymbol('proto.scope.DownloadSubLoomRequest', null, global);
goog.exportSymbol('proto.scope.Edge', null, global);
goog.exportSymbol('proto.scope.Embedding', null, global);
goog.exportSymbol('proto.scope.ErrorReply', null, global);
goog.exportSymbol('proto.scope.FeatureReply', null, global);
goog.exportSymbol('proto.scope.FeatureRequest', null, global);
goog.exportSymbol('proto.scope.FeatureValues', null, global);
goog.exportSymbol('proto.scope.FileMetaData', null, global);
goog.exportSymbol('proto.scope.GeneSetEnrichmentReply', null, global);
goog.exportSymbol('proto.scope.GeneSetEnrichmentRequest', null, global);
goog.exportSymbol('proto.scope.LoomHeierarchy', null, global);
goog.exportSymbol('proto.scope.LoomUploadedReply', null, global);
goog.exportSymbol('proto.scope.LoomUploadedRequest', null, global);
goog.exportSymbol('proto.scope.MarkerGenesMetric', null, global);
goog.exportSymbol('proto.scope.MarkerGenesReply', null, global);
goog.exportSymbol('proto.scope.MarkerGenesRequest', null, global);
goog.exportSymbol('proto.scope.MyGeneSet', null, global);
goog.exportSymbol('proto.scope.MyGeneSetsReply', null, global);
goog.exportSymbol('proto.scope.MyGeneSetsRequest', null, global);
goog.exportSymbol('proto.scope.MyLoom', null, global);
goog.exportSymbol('proto.scope.MyLoomsReply', null, global);
goog.exportSymbol('proto.scope.MyLoomsRequest', null, global);
goog.exportSymbol('proto.scope.Progress', null, global);
goog.exportSymbol('proto.scope.Regulon', null, global);
goog.exportSymbol('proto.scope.RegulonMetaDataReply', null, global);
goog.exportSymbol('proto.scope.RegulonMetaDataRequest', null, global);
goog.exportSymbol('proto.scope.RemainingUUIDTimeReply', null, global);
goog.exportSymbol('proto.scope.RemainingUUIDTimeRequest', null, global);
goog.exportSymbol('proto.scope.Trajectory', null, global);
goog.exportSymbol('proto.scope.TranslateLassoSelectionReply', null, global);
goog.exportSymbol('proto.scope.TranslateLassoSelectionRequest', null, global);
goog.exportSymbol('proto.scope.UUIDReply', null, global);
goog.exportSymbol('proto.scope.UUIDRequest', null, global);
goog.exportSymbol('proto.scope.VmaxReply', null, global);
goog.exportSymbol('proto.scope.VmaxRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.ErrorReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.ErrorReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.ErrorReply.displayName = 'proto.scope.ErrorReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.CellColorByFeaturesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.CellColorByFeaturesRequest.repeatedFields_, null);
};
goog.inherits(proto.scope.CellColorByFeaturesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.CellColorByFeaturesRequest.displayName = 'proto.scope.CellColorByFeaturesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.ColorLegend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.ColorLegend.repeatedFields_, null);
};
goog.inherits(proto.scope.ColorLegend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.ColorLegend.displayName = 'proto.scope.ColorLegend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.CellColorByFeaturesReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.CellColorByFeaturesReply.repeatedFields_, null);
};
goog.inherits(proto.scope.CellColorByFeaturesReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.CellColorByFeaturesReply.displayName = 'proto.scope.CellColorByFeaturesReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.CellAUCValuesByFeaturesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.CellAUCValuesByFeaturesRequest.repeatedFields_, null);
};
goog.inherits(proto.scope.CellAUCValuesByFeaturesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.CellAUCValuesByFeaturesRequest.displayName = 'proto.scope.CellAUCValuesByFeaturesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.CellAUCValuesByFeaturesReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.CellAUCValuesByFeaturesReply.repeatedFields_, null);
};
goog.inherits(proto.scope.CellAUCValuesByFeaturesReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.CellAUCValuesByFeaturesReply.displayName = 'proto.scope.CellAUCValuesByFeaturesReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.FeatureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.FeatureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.FeatureRequest.displayName = 'proto.scope.FeatureRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.CellMetaDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.CellMetaDataRequest.repeatedFields_, null);
};
goog.inherits(proto.scope.CellMetaDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.CellMetaDataRequest.displayName = 'proto.scope.CellMetaDataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.FeatureReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.FeatureReply.repeatedFields_, null);
};
goog.inherits(proto.scope.FeatureReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.FeatureReply.displayName = 'proto.scope.FeatureReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.CoordinatesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.CoordinatesRequest.repeatedFields_, null);
};
goog.inherits(proto.scope.CoordinatesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.CoordinatesRequest.displayName = 'proto.scope.CoordinatesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.CoordinatesReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.CoordinatesReply.repeatedFields_, null);
};
goog.inherits(proto.scope.CoordinatesReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.CoordinatesReply.displayName = 'proto.scope.CoordinatesReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.Annotation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.Annotation.repeatedFields_, null);
};
goog.inherits(proto.scope.Annotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.Annotation.displayName = 'proto.scope.Annotation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.Coordinate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.Coordinate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.Coordinate.displayName = 'proto.scope.Coordinate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.Edge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.Edge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.Edge.displayName = 'proto.scope.Edge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.Trajectory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.Trajectory.repeatedFields_, null);
};
goog.inherits(proto.scope.Trajectory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.Trajectory.displayName = 'proto.scope.Trajectory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.Embedding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.Embedding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.Embedding.displayName = 'proto.scope.Embedding';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.ClusterMarkerMetric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.ClusterMarkerMetric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.ClusterMarkerMetric.displayName = 'proto.scope.ClusterMarkerMetric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.ClusterAnnotation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.ClusterAnnotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.ClusterAnnotation.displayName = 'proto.scope.ClusterAnnotation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.Clustering = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.Clustering.repeatedFields_, null);
};
goog.inherits(proto.scope.Clustering, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.Clustering.displayName = 'proto.scope.Clustering';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.CellMetaData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.CellMetaData.repeatedFields_, null);
};
goog.inherits(proto.scope.CellMetaData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.CellMetaData.displayName = 'proto.scope.CellMetaData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.AUCThreshold = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.AUCThreshold, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.AUCThreshold.displayName = 'proto.scope.AUCThreshold';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.Regulon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.Regulon.repeatedFields_, null);
};
goog.inherits(proto.scope.Regulon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.Regulon.displayName = 'proto.scope.Regulon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.FileMetaData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.FileMetaData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.FileMetaData.displayName = 'proto.scope.FileMetaData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.FeatureValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.FeatureValues.repeatedFields_, null);
};
goog.inherits(proto.scope.FeatureValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.FeatureValues.displayName = 'proto.scope.FeatureValues';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.CellAnnotations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.CellAnnotations.repeatedFields_, null);
};
goog.inherits(proto.scope.CellAnnotations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.CellAnnotations.displayName = 'proto.scope.CellAnnotations';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.CellClusters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.CellClusters.repeatedFields_, null);
};
goog.inherits(proto.scope.CellClusters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.CellClusters.displayName = 'proto.scope.CellClusters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.CellMetaDataReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.CellMetaDataReply.repeatedFields_, null);
};
goog.inherits(proto.scope.CellMetaDataReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.CellMetaDataReply.displayName = 'proto.scope.CellMetaDataReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.RegulonMetaDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.RegulonMetaDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.RegulonMetaDataRequest.displayName = 'proto.scope.RegulonMetaDataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.RegulonMetaDataReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.RegulonMetaDataReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.RegulonMetaDataReply.displayName = 'proto.scope.RegulonMetaDataReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.MarkerGenesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.MarkerGenesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.MarkerGenesRequest.displayName = 'proto.scope.MarkerGenesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.MarkerGenesMetric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.MarkerGenesMetric.repeatedFields_, null);
};
goog.inherits(proto.scope.MarkerGenesMetric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.MarkerGenesMetric.displayName = 'proto.scope.MarkerGenesMetric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.MarkerGenesReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.MarkerGenesReply.repeatedFields_, null);
};
goog.inherits(proto.scope.MarkerGenesReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.MarkerGenesReply.displayName = 'proto.scope.MarkerGenesReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.MyLoomsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.MyLoomsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.MyLoomsRequest.displayName = 'proto.scope.MyLoomsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.LoomHeierarchy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.LoomHeierarchy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.LoomHeierarchy.displayName = 'proto.scope.LoomHeierarchy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.MyLoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.MyLoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.MyLoom.displayName = 'proto.scope.MyLoom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.MyLoomsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.MyLoomsReply.repeatedFields_, null);
};
goog.inherits(proto.scope.MyLoomsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.MyLoomsReply.displayName = 'proto.scope.MyLoomsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.TranslateLassoSelectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.TranslateLassoSelectionRequest.repeatedFields_, null);
};
goog.inherits(proto.scope.TranslateLassoSelectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.TranslateLassoSelectionRequest.displayName = 'proto.scope.TranslateLassoSelectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.TranslateLassoSelectionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.TranslateLassoSelectionReply.repeatedFields_, null);
};
goog.inherits(proto.scope.TranslateLassoSelectionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.TranslateLassoSelectionReply.displayName = 'proto.scope.TranslateLassoSelectionReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.CellIDsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.CellIDsRequest.repeatedFields_, null);
};
goog.inherits(proto.scope.CellIDsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.CellIDsRequest.displayName = 'proto.scope.CellIDsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.CellIDsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.CellIDsReply.repeatedFields_, null);
};
goog.inherits(proto.scope.CellIDsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.CellIDsReply.displayName = 'proto.scope.CellIDsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.GeneSetEnrichmentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.GeneSetEnrichmentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.GeneSetEnrichmentRequest.displayName = 'proto.scope.GeneSetEnrichmentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.Progress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.Progress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.Progress.displayName = 'proto.scope.Progress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.GeneSetEnrichmentReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.GeneSetEnrichmentReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.GeneSetEnrichmentReply.displayName = 'proto.scope.GeneSetEnrichmentReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.VmaxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.VmaxRequest.repeatedFields_, null);
};
goog.inherits(proto.scope.VmaxRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.VmaxRequest.displayName = 'proto.scope.VmaxRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.VmaxReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.VmaxReply.repeatedFields_, null);
};
goog.inherits(proto.scope.VmaxReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.VmaxReply.displayName = 'proto.scope.VmaxReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.UUIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.UUIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.UUIDRequest.displayName = 'proto.scope.UUIDRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.UUIDReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.UUIDReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.UUIDReply.displayName = 'proto.scope.UUIDReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.RemainingUUIDTimeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.RemainingUUIDTimeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.RemainingUUIDTimeRequest.displayName = 'proto.scope.RemainingUUIDTimeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.RemainingUUIDTimeReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.RemainingUUIDTimeReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.RemainingUUIDTimeReply.displayName = 'proto.scope.RemainingUUIDTimeReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.LoomUploadedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.LoomUploadedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.LoomUploadedRequest.displayName = 'proto.scope.LoomUploadedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.LoomUploadedReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.LoomUploadedReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.LoomUploadedReply.displayName = 'proto.scope.LoomUploadedReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.MyGeneSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.MyGeneSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.MyGeneSet.displayName = 'proto.scope.MyGeneSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.MyGeneSetsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.MyGeneSetsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.MyGeneSetsRequest.displayName = 'proto.scope.MyGeneSetsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.MyGeneSetsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scope.MyGeneSetsReply.repeatedFields_, null);
};
goog.inherits(proto.scope.MyGeneSetsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.MyGeneSetsReply.displayName = 'proto.scope.MyGeneSetsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.DeleteUserFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.DeleteUserFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.DeleteUserFileRequest.displayName = 'proto.scope.DeleteUserFileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.DeleteUserFileReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.DeleteUserFileReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.DeleteUserFileReply.displayName = 'proto.scope.DeleteUserFileReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.DownloadSubLoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.DownloadSubLoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.DownloadSubLoomRequest.displayName = 'proto.scope.DownloadSubLoomRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scope.DownloadSubLoomReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scope.DownloadSubLoomReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scope.DownloadSubLoomReply.displayName = 'proto.scope.DownloadSubLoomReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.ErrorReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.ErrorReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.ErrorReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.ErrorReply.toObject = function(includeInstance, msg) {
  var obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.ErrorReply}
 */
proto.scope.ErrorReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.ErrorReply;
  return proto.scope.ErrorReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.ErrorReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.ErrorReply}
 */
proto.scope.ErrorReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.ErrorReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.ErrorReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.ErrorReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.ErrorReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.scope.ErrorReply.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.ErrorReply.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.scope.ErrorReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.ErrorReply.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.CellColorByFeaturesRequest.repeatedFields_ = [2,3,6,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.CellColorByFeaturesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.CellColorByFeaturesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.CellColorByFeaturesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellColorByFeaturesRequest.toObject = function(includeInstance, msg) {
  var obj = {
    loomFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    featureList: jspb.Message.getRepeatedField(msg, 2),
    featureTypeList: jspb.Message.getRepeatedField(msg, 3),
    hasLogTransform: jspb.Message.getFieldWithDefault(msg, 4, false),
    hasCpmTransform: jspb.Message.getFieldWithDefault(msg, 5, false),
    thresholdList: jspb.Message.getRepeatedFloatingPointField(msg, 6),
    scaleThresholded: jspb.Message.getFieldWithDefault(msg, 7, false),
    annotationList: jspb.Message.toObjectList(msg.getAnnotationList(),
    proto.scope.Annotation.toObject, includeInstance),
    vmaxList: jspb.Message.getRepeatedFloatingPointField(msg, 9),
    logic: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.CellColorByFeaturesRequest}
 */
proto.scope.CellColorByFeaturesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.CellColorByFeaturesRequest;
  return proto.scope.CellColorByFeaturesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.CellColorByFeaturesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.CellColorByFeaturesRequest}
 */
proto.scope.CellColorByFeaturesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoomFilePath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFeature(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFeatureType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasLogTransform(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasCpmTransform(value);
      break;
    case 6:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setThresholdList(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setScaleThresholded(value);
      break;
    case 8:
      var value = new proto.scope.Annotation;
      reader.readMessage(value,proto.scope.Annotation.deserializeBinaryFromReader);
      msg.addAnnotation(value);
      break;
    case 9:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setVmaxList(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.CellColorByFeaturesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.CellColorByFeaturesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.CellColorByFeaturesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellColorByFeaturesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoomFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getFeatureTypeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getHasLogTransform();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getHasCpmTransform();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getThresholdList();
  if (f.length > 0) {
    writer.writePackedFloat(
      6,
      f
    );
  }
  f = message.getScaleThresholded();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getAnnotationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.scope.Annotation.serializeBinaryToWriter
    );
  }
  f = message.getVmaxList();
  if (f.length > 0) {
    writer.writePackedFloat(
      9,
      f
    );
  }
  f = message.getLogic();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string loom_file_path = 1;
 * @return {string}
 */
proto.scope.CellColorByFeaturesRequest.prototype.getLoomFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.CellColorByFeaturesRequest.prototype.setLoomFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string feature = 2;
 * @return {!Array<string>}
 */
proto.scope.CellColorByFeaturesRequest.prototype.getFeatureList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.scope.CellColorByFeaturesRequest.prototype.setFeatureList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.CellColorByFeaturesRequest.prototype.addFeature = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellColorByFeaturesRequest.prototype.clearFeatureList = function() {
  this.setFeatureList([]);
};


/**
 * repeated string feature_type = 3;
 * @return {!Array<string>}
 */
proto.scope.CellColorByFeaturesRequest.prototype.getFeatureTypeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.scope.CellColorByFeaturesRequest.prototype.setFeatureTypeList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.CellColorByFeaturesRequest.prototype.addFeatureType = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellColorByFeaturesRequest.prototype.clearFeatureTypeList = function() {
  this.setFeatureTypeList([]);
};


/**
 * optional bool has_log_transform = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.CellColorByFeaturesRequest.prototype.getHasLogTransform = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.scope.CellColorByFeaturesRequest.prototype.setHasLogTransform = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool has_cpm_transform = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.CellColorByFeaturesRequest.prototype.getHasCpmTransform = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.scope.CellColorByFeaturesRequest.prototype.setHasCpmTransform = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * repeated float threshold = 6;
 * @return {!Array<number>}
 */
proto.scope.CellColorByFeaturesRequest.prototype.getThresholdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/** @param {!Array<number>} value */
proto.scope.CellColorByFeaturesRequest.prototype.setThresholdList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.CellColorByFeaturesRequest.prototype.addThreshold = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellColorByFeaturesRequest.prototype.clearThresholdList = function() {
  this.setThresholdList([]);
};


/**
 * optional bool scale_thresholded = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.CellColorByFeaturesRequest.prototype.getScaleThresholded = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.scope.CellColorByFeaturesRequest.prototype.setScaleThresholded = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * repeated Annotation annotation = 8;
 * @return {!Array<!proto.scope.Annotation>}
 */
proto.scope.CellColorByFeaturesRequest.prototype.getAnnotationList = function() {
  return /** @type{!Array<!proto.scope.Annotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.Annotation, 8));
};


/** @param {!Array<!proto.scope.Annotation>} value */
proto.scope.CellColorByFeaturesRequest.prototype.setAnnotationList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.scope.Annotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.Annotation}
 */
proto.scope.CellColorByFeaturesRequest.prototype.addAnnotation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.scope.Annotation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellColorByFeaturesRequest.prototype.clearAnnotationList = function() {
  this.setAnnotationList([]);
};


/**
 * repeated float vmax = 9;
 * @return {!Array<number>}
 */
proto.scope.CellColorByFeaturesRequest.prototype.getVmaxList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 9));
};


/** @param {!Array<number>} value */
proto.scope.CellColorByFeaturesRequest.prototype.setVmaxList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.CellColorByFeaturesRequest.prototype.addVmax = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellColorByFeaturesRequest.prototype.clearVmaxList = function() {
  this.setVmaxList([]);
};


/**
 * optional string logic = 10;
 * @return {string}
 */
proto.scope.CellColorByFeaturesRequest.prototype.getLogic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.scope.CellColorByFeaturesRequest.prototype.setLogic = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.ColorLegend.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.ColorLegend.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.ColorLegend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.ColorLegend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.ColorLegend.toObject = function(includeInstance, msg) {
  var obj = {
    valuesList: jspb.Message.getRepeatedField(msg, 1),
    colorsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.ColorLegend}
 */
proto.scope.ColorLegend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.ColorLegend;
  return proto.scope.ColorLegend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.ColorLegend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.ColorLegend}
 */
proto.scope.ColorLegend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addColors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.ColorLegend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.ColorLegend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.ColorLegend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.ColorLegend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getColorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.scope.ColorLegend.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.scope.ColorLegend.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.ColorLegend.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.ColorLegend.prototype.clearValuesList = function() {
  this.setValuesList([]);
};


/**
 * repeated string colors = 2;
 * @return {!Array<string>}
 */
proto.scope.ColorLegend.prototype.getColorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.scope.ColorLegend.prototype.setColorsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.ColorLegend.prototype.addColors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.ColorLegend.prototype.clearColorsList = function() {
  this.setColorsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.CellColorByFeaturesReply.repeatedFields_ = [3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.CellColorByFeaturesReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.CellColorByFeaturesReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.CellColorByFeaturesReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellColorByFeaturesReply.toObject = function(includeInstance, msg) {
  var obj = {
    hasAddCompressionLayer: jspb.Message.getFieldWithDefault(msg, 1, false),
    compressedColor: msg.getCompressedColor_asB64(),
    colorList: jspb.Message.getRepeatedField(msg, 3),
    vmaxList: jspb.Message.getRepeatedFloatingPointField(msg, 4),
    maxVmaxList: jspb.Message.getRepeatedFloatingPointField(msg, 5),
    cellIndicesList: jspb.Message.getRepeatedField(msg, 6),
    legend: (f = msg.getLegend()) && proto.scope.ColorLegend.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.scope.ErrorReply.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.CellColorByFeaturesReply}
 */
proto.scope.CellColorByFeaturesReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.CellColorByFeaturesReply;
  return proto.scope.CellColorByFeaturesReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.CellColorByFeaturesReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.CellColorByFeaturesReply}
 */
proto.scope.CellColorByFeaturesReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasAddCompressionLayer(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCompressedColor(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addColor(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setVmaxList(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setMaxVmaxList(value);
      break;
    case 6:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setCellIndicesList(value);
      break;
    case 7:
      var value = new proto.scope.ColorLegend;
      reader.readMessage(value,proto.scope.ColorLegend.deserializeBinaryFromReader);
      msg.setLegend(value);
      break;
    case 8:
      var value = new proto.scope.ErrorReply;
      reader.readMessage(value,proto.scope.ErrorReply.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.CellColorByFeaturesReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.CellColorByFeaturesReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.CellColorByFeaturesReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellColorByFeaturesReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHasAddCompressionLayer();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCompressedColor_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getColorList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getVmaxList();
  if (f.length > 0) {
    writer.writePackedFloat(
      4,
      f
    );
  }
  f = message.getMaxVmaxList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getCellIndicesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      6,
      f
    );
  }
  f = message.getLegend();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.scope.ColorLegend.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.scope.ErrorReply.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool has_add_compression_layer = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.CellColorByFeaturesReply.prototype.getHasAddCompressionLayer = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.scope.CellColorByFeaturesReply.prototype.setHasAddCompressionLayer = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bytes compressed_color = 2;
 * @return {string}
 */
proto.scope.CellColorByFeaturesReply.prototype.getCompressedColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes compressed_color = 2;
 * This is a type-conversion wrapper around `getCompressedColor()`
 * @return {string}
 */
proto.scope.CellColorByFeaturesReply.prototype.getCompressedColor_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCompressedColor()));
};


/**
 * optional bytes compressed_color = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCompressedColor()`
 * @return {!Uint8Array}
 */
proto.scope.CellColorByFeaturesReply.prototype.getCompressedColor_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCompressedColor()));
};


/** @param {!(string|Uint8Array)} value */
proto.scope.CellColorByFeaturesReply.prototype.setCompressedColor = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated string color = 3;
 * @return {!Array<string>}
 */
proto.scope.CellColorByFeaturesReply.prototype.getColorList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.scope.CellColorByFeaturesReply.prototype.setColorList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.CellColorByFeaturesReply.prototype.addColor = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellColorByFeaturesReply.prototype.clearColorList = function() {
  this.setColorList([]);
};


/**
 * repeated float vmax = 4;
 * @return {!Array<number>}
 */
proto.scope.CellColorByFeaturesReply.prototype.getVmaxList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/** @param {!Array<number>} value */
proto.scope.CellColorByFeaturesReply.prototype.setVmaxList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.CellColorByFeaturesReply.prototype.addVmax = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellColorByFeaturesReply.prototype.clearVmaxList = function() {
  this.setVmaxList([]);
};


/**
 * repeated float max_vmax = 5;
 * @return {!Array<number>}
 */
proto.scope.CellColorByFeaturesReply.prototype.getMaxVmaxList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/** @param {!Array<number>} value */
proto.scope.CellColorByFeaturesReply.prototype.setMaxVmaxList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.CellColorByFeaturesReply.prototype.addMaxVmax = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellColorByFeaturesReply.prototype.clearMaxVmaxList = function() {
  this.setMaxVmaxList([]);
};


/**
 * repeated int32 cell_indices = 6;
 * @return {!Array<number>}
 */
proto.scope.CellColorByFeaturesReply.prototype.getCellIndicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<number>} value */
proto.scope.CellColorByFeaturesReply.prototype.setCellIndicesList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.CellColorByFeaturesReply.prototype.addCellIndices = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellColorByFeaturesReply.prototype.clearCellIndicesList = function() {
  this.setCellIndicesList([]);
};


/**
 * optional ColorLegend legend = 7;
 * @return {?proto.scope.ColorLegend}
 */
proto.scope.CellColorByFeaturesReply.prototype.getLegend = function() {
  return /** @type{?proto.scope.ColorLegend} */ (
    jspb.Message.getWrapperField(this, proto.scope.ColorLegend, 7));
};


/** @param {?proto.scope.ColorLegend|undefined} value */
proto.scope.CellColorByFeaturesReply.prototype.setLegend = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.scope.CellColorByFeaturesReply.prototype.clearLegend = function() {
  this.setLegend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scope.CellColorByFeaturesReply.prototype.hasLegend = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ErrorReply error = 8;
 * @return {?proto.scope.ErrorReply}
 */
proto.scope.CellColorByFeaturesReply.prototype.getError = function() {
  return /** @type{?proto.scope.ErrorReply} */ (
    jspb.Message.getWrapperField(this, proto.scope.ErrorReply, 8));
};


/** @param {?proto.scope.ErrorReply|undefined} value */
proto.scope.CellColorByFeaturesReply.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.scope.CellColorByFeaturesReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scope.CellColorByFeaturesReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.CellAUCValuesByFeaturesRequest.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.CellAUCValuesByFeaturesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.CellAUCValuesByFeaturesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.CellAUCValuesByFeaturesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellAUCValuesByFeaturesRequest.toObject = function(includeInstance, msg) {
  var obj = {
    loomFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    featureList: jspb.Message.getRepeatedField(msg, 2),
    featureTypeList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.CellAUCValuesByFeaturesRequest}
 */
proto.scope.CellAUCValuesByFeaturesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.CellAUCValuesByFeaturesRequest;
  return proto.scope.CellAUCValuesByFeaturesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.CellAUCValuesByFeaturesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.CellAUCValuesByFeaturesRequest}
 */
proto.scope.CellAUCValuesByFeaturesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoomFilePath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFeature(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFeatureType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.CellAUCValuesByFeaturesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.CellAUCValuesByFeaturesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.CellAUCValuesByFeaturesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellAUCValuesByFeaturesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoomFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getFeatureTypeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string loom_file_path = 1;
 * @return {string}
 */
proto.scope.CellAUCValuesByFeaturesRequest.prototype.getLoomFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.CellAUCValuesByFeaturesRequest.prototype.setLoomFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string feature = 2;
 * @return {!Array<string>}
 */
proto.scope.CellAUCValuesByFeaturesRequest.prototype.getFeatureList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.scope.CellAUCValuesByFeaturesRequest.prototype.setFeatureList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.CellAUCValuesByFeaturesRequest.prototype.addFeature = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellAUCValuesByFeaturesRequest.prototype.clearFeatureList = function() {
  this.setFeatureList([]);
};


/**
 * repeated string feature_type = 3;
 * @return {!Array<string>}
 */
proto.scope.CellAUCValuesByFeaturesRequest.prototype.getFeatureTypeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.scope.CellAUCValuesByFeaturesRequest.prototype.setFeatureTypeList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.CellAUCValuesByFeaturesRequest.prototype.addFeatureType = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellAUCValuesByFeaturesRequest.prototype.clearFeatureTypeList = function() {
  this.setFeatureTypeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.CellAUCValuesByFeaturesReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.CellAUCValuesByFeaturesReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.CellAUCValuesByFeaturesReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.CellAUCValuesByFeaturesReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellAUCValuesByFeaturesReply.toObject = function(includeInstance, msg) {
  var obj = {
    valueList: jspb.Message.getRepeatedFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.CellAUCValuesByFeaturesReply}
 */
proto.scope.CellAUCValuesByFeaturesReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.CellAUCValuesByFeaturesReply;
  return proto.scope.CellAUCValuesByFeaturesReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.CellAUCValuesByFeaturesReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.CellAUCValuesByFeaturesReply}
 */
proto.scope.CellAUCValuesByFeaturesReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setValueList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.CellAUCValuesByFeaturesReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.CellAUCValuesByFeaturesReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.CellAUCValuesByFeaturesReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellAUCValuesByFeaturesReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float value = 1;
 * @return {!Array<number>}
 */
proto.scope.CellAUCValuesByFeaturesReply.prototype.getValueList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array<number>} value */
proto.scope.CellAUCValuesByFeaturesReply.prototype.setValueList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.CellAUCValuesByFeaturesReply.prototype.addValue = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellAUCValuesByFeaturesReply.prototype.clearValueList = function() {
  this.setValueList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.FeatureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.FeatureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.FeatureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.FeatureRequest.toObject = function(includeInstance, msg) {
  var obj = {
    loomFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.FeatureRequest}
 */
proto.scope.FeatureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.FeatureRequest;
  return proto.scope.FeatureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.FeatureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.FeatureRequest}
 */
proto.scope.FeatureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoomFilePath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.FeatureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.FeatureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.FeatureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.FeatureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoomFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string loom_file_path = 1;
 * @return {string}
 */
proto.scope.FeatureRequest.prototype.getLoomFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.FeatureRequest.prototype.setLoomFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.scope.FeatureRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.FeatureRequest.prototype.setQuery = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.CellMetaDataRequest.repeatedFields_ = [2,3,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.CellMetaDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.CellMetaDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.CellMetaDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellMetaDataRequest.toObject = function(includeInstance, msg) {
  var obj = {
    loomFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cellIndicesList: jspb.Message.getRepeatedField(msg, 2),
    selectedGenesList: jspb.Message.getRepeatedField(msg, 3),
    hasLogTransform: jspb.Message.getFieldWithDefault(msg, 4, false),
    hasCpmTransform: jspb.Message.getFieldWithDefault(msg, 5, false),
    selectedRegulonsList: jspb.Message.getRepeatedField(msg, 6),
    clusteringsList: jspb.Message.getRepeatedField(msg, 7),
    annotationsList: jspb.Message.getRepeatedField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.CellMetaDataRequest}
 */
proto.scope.CellMetaDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.CellMetaDataRequest;
  return proto.scope.CellMetaDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.CellMetaDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.CellMetaDataRequest}
 */
proto.scope.CellMetaDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoomFilePath(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setCellIndicesList(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addSelectedGenes(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasLogTransform(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasCpmTransform(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addSelectedRegulons(value);
      break;
    case 7:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setClusteringsList(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addAnnotations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.CellMetaDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.CellMetaDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.CellMetaDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellMetaDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoomFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCellIndicesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getSelectedGenesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getHasLogTransform();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getHasCpmTransform();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getSelectedRegulonsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getClusteringsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      7,
      f
    );
  }
  f = message.getAnnotationsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
};


/**
 * optional string loom_file_path = 1;
 * @return {string}
 */
proto.scope.CellMetaDataRequest.prototype.getLoomFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.CellMetaDataRequest.prototype.setLoomFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated int32 cell_indices = 2;
 * @return {!Array<number>}
 */
proto.scope.CellMetaDataRequest.prototype.getCellIndicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.scope.CellMetaDataRequest.prototype.setCellIndicesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.CellMetaDataRequest.prototype.addCellIndices = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellMetaDataRequest.prototype.clearCellIndicesList = function() {
  this.setCellIndicesList([]);
};


/**
 * repeated string selected_genes = 3;
 * @return {!Array<string>}
 */
proto.scope.CellMetaDataRequest.prototype.getSelectedGenesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.scope.CellMetaDataRequest.prototype.setSelectedGenesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.CellMetaDataRequest.prototype.addSelectedGenes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellMetaDataRequest.prototype.clearSelectedGenesList = function() {
  this.setSelectedGenesList([]);
};


/**
 * optional bool has_log_transform = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.CellMetaDataRequest.prototype.getHasLogTransform = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.scope.CellMetaDataRequest.prototype.setHasLogTransform = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool has_cpm_transform = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.CellMetaDataRequest.prototype.getHasCpmTransform = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.scope.CellMetaDataRequest.prototype.setHasCpmTransform = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * repeated string selected_regulons = 6;
 * @return {!Array<string>}
 */
proto.scope.CellMetaDataRequest.prototype.getSelectedRegulonsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.scope.CellMetaDataRequest.prototype.setSelectedRegulonsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.CellMetaDataRequest.prototype.addSelectedRegulons = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellMetaDataRequest.prototype.clearSelectedRegulonsList = function() {
  this.setSelectedRegulonsList([]);
};


/**
 * repeated int32 clusterings = 7;
 * @return {!Array<number>}
 */
proto.scope.CellMetaDataRequest.prototype.getClusteringsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<number>} value */
proto.scope.CellMetaDataRequest.prototype.setClusteringsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.CellMetaDataRequest.prototype.addClusterings = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellMetaDataRequest.prototype.clearClusteringsList = function() {
  this.setClusteringsList([]);
};


/**
 * repeated string annotations = 8;
 * @return {!Array<string>}
 */
proto.scope.CellMetaDataRequest.prototype.getAnnotationsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.scope.CellMetaDataRequest.prototype.setAnnotationsList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.CellMetaDataRequest.prototype.addAnnotations = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellMetaDataRequest.prototype.clearAnnotationsList = function() {
  this.setAnnotationsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.FeatureReply.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.FeatureReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.FeatureReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.FeatureReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.FeatureReply.toObject = function(includeInstance, msg) {
  var obj = {
    featureList: jspb.Message.getRepeatedField(msg, 1),
    featureTypeList: jspb.Message.getRepeatedField(msg, 2),
    featureDescriptionList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.FeatureReply}
 */
proto.scope.FeatureReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.FeatureReply;
  return proto.scope.FeatureReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.FeatureReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.FeatureReply}
 */
proto.scope.FeatureReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFeature(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFeatureType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFeatureDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.FeatureReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.FeatureReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.FeatureReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.FeatureReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getFeatureTypeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getFeatureDescriptionList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * repeated string feature = 1;
 * @return {!Array<string>}
 */
proto.scope.FeatureReply.prototype.getFeatureList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.scope.FeatureReply.prototype.setFeatureList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.FeatureReply.prototype.addFeature = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.FeatureReply.prototype.clearFeatureList = function() {
  this.setFeatureList([]);
};


/**
 * repeated string feature_type = 2;
 * @return {!Array<string>}
 */
proto.scope.FeatureReply.prototype.getFeatureTypeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.scope.FeatureReply.prototype.setFeatureTypeList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.FeatureReply.prototype.addFeatureType = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.FeatureReply.prototype.clearFeatureTypeList = function() {
  this.setFeatureTypeList([]);
};


/**
 * repeated string feature_description = 3;
 * @return {!Array<string>}
 */
proto.scope.FeatureReply.prototype.getFeatureDescriptionList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.scope.FeatureReply.prototype.setFeatureDescriptionList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.FeatureReply.prototype.addFeatureDescription = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.FeatureReply.prototype.clearFeatureDescriptionList = function() {
  this.setFeatureDescriptionList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.CoordinatesRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.CoordinatesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.CoordinatesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.CoordinatesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CoordinatesRequest.toObject = function(includeInstance, msg) {
  var obj = {
    loomFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    coordinatesId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    annotationList: jspb.Message.toObjectList(msg.getAnnotationList(),
    proto.scope.Annotation.toObject, includeInstance),
    logic: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.CoordinatesRequest}
 */
proto.scope.CoordinatesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.CoordinatesRequest;
  return proto.scope.CoordinatesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.CoordinatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.CoordinatesRequest}
 */
proto.scope.CoordinatesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoomFilePath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoordinatesId(value);
      break;
    case 3:
      var value = new proto.scope.Annotation;
      reader.readMessage(value,proto.scope.Annotation.deserializeBinaryFromReader);
      msg.addAnnotation(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.CoordinatesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.CoordinatesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.CoordinatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CoordinatesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoomFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCoordinatesId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAnnotationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.scope.Annotation.serializeBinaryToWriter
    );
  }
  f = message.getLogic();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string loom_file_path = 1;
 * @return {string}
 */
proto.scope.CoordinatesRequest.prototype.getLoomFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.CoordinatesRequest.prototype.setLoomFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 coordinates_id = 2;
 * @return {number}
 */
proto.scope.CoordinatesRequest.prototype.getCoordinatesId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.scope.CoordinatesRequest.prototype.setCoordinatesId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Annotation annotation = 3;
 * @return {!Array<!proto.scope.Annotation>}
 */
proto.scope.CoordinatesRequest.prototype.getAnnotationList = function() {
  return /** @type{!Array<!proto.scope.Annotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.Annotation, 3));
};


/** @param {!Array<!proto.scope.Annotation>} value */
proto.scope.CoordinatesRequest.prototype.setAnnotationList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.scope.Annotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.Annotation}
 */
proto.scope.CoordinatesRequest.prototype.addAnnotation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.scope.Annotation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CoordinatesRequest.prototype.clearAnnotationList = function() {
  this.setAnnotationList([]);
};


/**
 * optional string logic = 4;
 * @return {string}
 */
proto.scope.CoordinatesRequest.prototype.getLogic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.scope.CoordinatesRequest.prototype.setLogic = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.CoordinatesReply.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.CoordinatesReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.CoordinatesReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.CoordinatesReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CoordinatesReply.toObject = function(includeInstance, msg) {
  var obj = {
    xList: jspb.Message.getRepeatedFloatingPointField(msg, 1),
    yList: jspb.Message.getRepeatedFloatingPointField(msg, 2),
    cellIndicesList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.CoordinatesReply}
 */
proto.scope.CoordinatesReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.CoordinatesReply;
  return proto.scope.CoordinatesReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.CoordinatesReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.CoordinatesReply}
 */
proto.scope.CoordinatesReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setXList(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setYList(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setCellIndicesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.CoordinatesReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.CoordinatesReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.CoordinatesReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CoordinatesReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = message.getYList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
  f = message.getCellIndicesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
};


/**
 * repeated float x = 1;
 * @return {!Array<number>}
 */
proto.scope.CoordinatesReply.prototype.getXList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array<number>} value */
proto.scope.CoordinatesReply.prototype.setXList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.CoordinatesReply.prototype.addX = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CoordinatesReply.prototype.clearXList = function() {
  this.setXList([]);
};


/**
 * repeated float y = 2;
 * @return {!Array<number>}
 */
proto.scope.CoordinatesReply.prototype.getYList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {!Array<number>} value */
proto.scope.CoordinatesReply.prototype.setYList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.CoordinatesReply.prototype.addY = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CoordinatesReply.prototype.clearYList = function() {
  this.setYList([]);
};


/**
 * repeated int32 cell_indices = 3;
 * @return {!Array<number>}
 */
proto.scope.CoordinatesReply.prototype.getCellIndicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.scope.CoordinatesReply.prototype.setCellIndicesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.CoordinatesReply.prototype.addCellIndices = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CoordinatesReply.prototype.clearCellIndicesList = function() {
  this.setCellIndicesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.Annotation.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.Annotation.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.Annotation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.Annotation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.Annotation.toObject = function(includeInstance, msg) {
  var obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valuesList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.Annotation}
 */
proto.scope.Annotation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.Annotation;
  return proto.scope.Annotation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.Annotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.Annotation}
 */
proto.scope.Annotation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.Annotation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.Annotation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.Annotation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.Annotation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.scope.Annotation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.Annotation.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string values = 2;
 * @return {!Array<string>}
 */
proto.scope.Annotation.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.scope.Annotation.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.Annotation.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.Annotation.prototype.clearValuesList = function() {
  this.setValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.Coordinate.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.Coordinate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.Coordinate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.Coordinate.toObject = function(includeInstance, msg) {
  var obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.Coordinate}
 */
proto.scope.Coordinate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.Coordinate;
  return proto.scope.Coordinate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.Coordinate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.Coordinate}
 */
proto.scope.Coordinate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.Coordinate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.Coordinate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.Coordinate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.Coordinate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.scope.Coordinate.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.scope.Coordinate.prototype.setX = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.scope.Coordinate.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.scope.Coordinate.prototype.setY = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.Edge.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.Edge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.Edge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.Edge.toObject = function(includeInstance, msg) {
  var obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    target: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.Edge}
 */
proto.scope.Edge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.Edge;
  return proto.scope.Edge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.Edge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.Edge}
 */
proto.scope.Edge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.Edge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.Edge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.Edge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.Edge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.scope.Edge.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.Edge.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string target = 2;
 * @return {string}
 */
proto.scope.Edge.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.Edge.prototype.setTarget = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.Trajectory.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.Trajectory.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.Trajectory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.Trajectory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.Trajectory.toObject = function(includeInstance, msg) {
  var obj = {
    nodesList: jspb.Message.getRepeatedField(msg, 1),
    edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    proto.scope.Edge.toObject, includeInstance),
    coordinatesList: jspb.Message.toObjectList(msg.getCoordinatesList(),
    proto.scope.Coordinate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.Trajectory}
 */
proto.scope.Trajectory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.Trajectory;
  return proto.scope.Trajectory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.Trajectory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.Trajectory}
 */
proto.scope.Trajectory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addNodes(value);
      break;
    case 2:
      var value = new proto.scope.Edge;
      reader.readMessage(value,proto.scope.Edge.deserializeBinaryFromReader);
      msg.addEdges(value);
      break;
    case 3:
      var value = new proto.scope.Coordinate;
      reader.readMessage(value,proto.scope.Coordinate.deserializeBinaryFromReader);
      msg.addCoordinates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.Trajectory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.Trajectory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.Trajectory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.Trajectory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.scope.Edge.serializeBinaryToWriter
    );
  }
  f = message.getCoordinatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.scope.Coordinate.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string nodes = 1;
 * @return {!Array<string>}
 */
proto.scope.Trajectory.prototype.getNodesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.scope.Trajectory.prototype.setNodesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.Trajectory.prototype.addNodes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.Trajectory.prototype.clearNodesList = function() {
  this.setNodesList([]);
};


/**
 * repeated Edge edges = 2;
 * @return {!Array<!proto.scope.Edge>}
 */
proto.scope.Trajectory.prototype.getEdgesList = function() {
  return /** @type{!Array<!proto.scope.Edge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.Edge, 2));
};


/** @param {!Array<!proto.scope.Edge>} value */
proto.scope.Trajectory.prototype.setEdgesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.scope.Edge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.Edge}
 */
proto.scope.Trajectory.prototype.addEdges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.scope.Edge, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.Trajectory.prototype.clearEdgesList = function() {
  this.setEdgesList([]);
};


/**
 * repeated Coordinate coordinates = 3;
 * @return {!Array<!proto.scope.Coordinate>}
 */
proto.scope.Trajectory.prototype.getCoordinatesList = function() {
  return /** @type{!Array<!proto.scope.Coordinate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.Coordinate, 3));
};


/** @param {!Array<!proto.scope.Coordinate>} value */
proto.scope.Trajectory.prototype.setCoordinatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.scope.Coordinate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.Coordinate}
 */
proto.scope.Trajectory.prototype.addCoordinates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.scope.Coordinate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.Trajectory.prototype.clearCoordinatesList = function() {
  this.setCoordinatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.Embedding.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.Embedding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.Embedding} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.Embedding.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    trajectory: (f = msg.getTrajectory()) && proto.scope.Trajectory.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.Embedding}
 */
proto.scope.Embedding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.Embedding;
  return proto.scope.Embedding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.Embedding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.Embedding}
 */
proto.scope.Embedding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.scope.Trajectory;
      reader.readMessage(value,proto.scope.Trajectory.deserializeBinaryFromReader);
      msg.setTrajectory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.Embedding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.Embedding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.Embedding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.Embedding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTrajectory();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.scope.Trajectory.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.scope.Embedding.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.scope.Embedding.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.scope.Embedding.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.Embedding.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Trajectory trajectory = 3;
 * @return {?proto.scope.Trajectory}
 */
proto.scope.Embedding.prototype.getTrajectory = function() {
  return /** @type{?proto.scope.Trajectory} */ (
    jspb.Message.getWrapperField(this, proto.scope.Trajectory, 3));
};


/** @param {?proto.scope.Trajectory|undefined} value */
proto.scope.Embedding.prototype.setTrajectory = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.scope.Embedding.prototype.clearTrajectory = function() {
  this.setTrajectory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scope.Embedding.prototype.hasTrajectory = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.ClusterMarkerMetric.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.ClusterMarkerMetric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.ClusterMarkerMetric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.ClusterMarkerMetric.toObject = function(includeInstance, msg) {
  var obj = {
    accessor: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.ClusterMarkerMetric}
 */
proto.scope.ClusterMarkerMetric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.ClusterMarkerMetric;
  return proto.scope.ClusterMarkerMetric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.ClusterMarkerMetric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.ClusterMarkerMetric}
 */
proto.scope.ClusterMarkerMetric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessor(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.ClusterMarkerMetric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.ClusterMarkerMetric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.ClusterMarkerMetric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.ClusterMarkerMetric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessor();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string accessor = 1;
 * @return {string}
 */
proto.scope.ClusterMarkerMetric.prototype.getAccessor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.ClusterMarkerMetric.prototype.setAccessor = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.scope.ClusterMarkerMetric.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.ClusterMarkerMetric.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.scope.ClusterMarkerMetric.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.scope.ClusterMarkerMetric.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.ClusterAnnotation.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.ClusterAnnotation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.ClusterAnnotation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.ClusterAnnotation.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.ClusterAnnotation}
 */
proto.scope.ClusterAnnotation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.ClusterAnnotation;
  return proto.scope.ClusterAnnotation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.ClusterAnnotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.ClusterAnnotation}
 */
proto.scope.ClusterAnnotation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.ClusterAnnotation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.ClusterAnnotation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.ClusterAnnotation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.ClusterAnnotation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.scope.ClusterAnnotation.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.scope.ClusterAnnotation.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.scope.ClusterAnnotation.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.ClusterAnnotation.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.Clustering.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.Clustering.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.Clustering.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.Clustering} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.Clustering.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    group: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clusterMarkerMetricsList: jspb.Message.toObjectList(msg.getClusterMarkerMetricsList(),
    proto.scope.ClusterMarkerMetric.toObject, includeInstance),
    clustersList: jspb.Message.toObjectList(msg.getClustersList(),
    proto.scope.ClusterAnnotation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.Clustering}
 */
proto.scope.Clustering.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.Clustering;
  return proto.scope.Clustering.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.Clustering} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.Clustering}
 */
proto.scope.Clustering.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroup(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new proto.scope.ClusterMarkerMetric;
      reader.readMessage(value,proto.scope.ClusterMarkerMetric.deserializeBinaryFromReader);
      msg.addClusterMarkerMetrics(value);
      break;
    case 5:
      var value = new proto.scope.ClusterAnnotation;
      reader.readMessage(value,proto.scope.ClusterAnnotation.deserializeBinaryFromReader);
      msg.addClusters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.Clustering.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.Clustering.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.Clustering} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.Clustering.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGroup();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClusterMarkerMetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.scope.ClusterMarkerMetric.serializeBinaryToWriter
    );
  }
  f = message.getClustersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.scope.ClusterAnnotation.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.scope.Clustering.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.scope.Clustering.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string group = 2;
 * @return {string}
 */
proto.scope.Clustering.prototype.getGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.Clustering.prototype.setGroup = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.scope.Clustering.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.scope.Clustering.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated ClusterMarkerMetric cluster_marker_metrics = 4;
 * @return {!Array<!proto.scope.ClusterMarkerMetric>}
 */
proto.scope.Clustering.prototype.getClusterMarkerMetricsList = function() {
  return /** @type{!Array<!proto.scope.ClusterMarkerMetric>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.ClusterMarkerMetric, 4));
};


/** @param {!Array<!proto.scope.ClusterMarkerMetric>} value */
proto.scope.Clustering.prototype.setClusterMarkerMetricsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.scope.ClusterMarkerMetric=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.ClusterMarkerMetric}
 */
proto.scope.Clustering.prototype.addClusterMarkerMetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.scope.ClusterMarkerMetric, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.Clustering.prototype.clearClusterMarkerMetricsList = function() {
  this.setClusterMarkerMetricsList([]);
};


/**
 * repeated ClusterAnnotation clusters = 5;
 * @return {!Array<!proto.scope.ClusterAnnotation>}
 */
proto.scope.Clustering.prototype.getClustersList = function() {
  return /** @type{!Array<!proto.scope.ClusterAnnotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.ClusterAnnotation, 5));
};


/** @param {!Array<!proto.scope.ClusterAnnotation>} value */
proto.scope.Clustering.prototype.setClustersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.scope.ClusterAnnotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.ClusterAnnotation}
 */
proto.scope.Clustering.prototype.addClusters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.scope.ClusterAnnotation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.Clustering.prototype.clearClustersList = function() {
  this.setClustersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.CellMetaData.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.CellMetaData.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.CellMetaData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.CellMetaData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellMetaData.toObject = function(includeInstance, msg) {
  var obj = {
    annotationsList: jspb.Message.toObjectList(msg.getAnnotationsList(),
    proto.scope.Annotation.toObject, includeInstance),
    embeddingsList: jspb.Message.toObjectList(msg.getEmbeddingsList(),
    proto.scope.Embedding.toObject, includeInstance),
    clusteringsList: jspb.Message.toObjectList(msg.getClusteringsList(),
    proto.scope.Clustering.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.CellMetaData}
 */
proto.scope.CellMetaData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.CellMetaData;
  return proto.scope.CellMetaData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.CellMetaData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.CellMetaData}
 */
proto.scope.CellMetaData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scope.Annotation;
      reader.readMessage(value,proto.scope.Annotation.deserializeBinaryFromReader);
      msg.addAnnotations(value);
      break;
    case 2:
      var value = new proto.scope.Embedding;
      reader.readMessage(value,proto.scope.Embedding.deserializeBinaryFromReader);
      msg.addEmbeddings(value);
      break;
    case 3:
      var value = new proto.scope.Clustering;
      reader.readMessage(value,proto.scope.Clustering.deserializeBinaryFromReader);
      msg.addClusterings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.CellMetaData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.CellMetaData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.CellMetaData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellMetaData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnnotationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.scope.Annotation.serializeBinaryToWriter
    );
  }
  f = message.getEmbeddingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.scope.Embedding.serializeBinaryToWriter
    );
  }
  f = message.getClusteringsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.scope.Clustering.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Annotation annotations = 1;
 * @return {!Array<!proto.scope.Annotation>}
 */
proto.scope.CellMetaData.prototype.getAnnotationsList = function() {
  return /** @type{!Array<!proto.scope.Annotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.Annotation, 1));
};


/** @param {!Array<!proto.scope.Annotation>} value */
proto.scope.CellMetaData.prototype.setAnnotationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.scope.Annotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.Annotation}
 */
proto.scope.CellMetaData.prototype.addAnnotations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.scope.Annotation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellMetaData.prototype.clearAnnotationsList = function() {
  this.setAnnotationsList([]);
};


/**
 * repeated Embedding embeddings = 2;
 * @return {!Array<!proto.scope.Embedding>}
 */
proto.scope.CellMetaData.prototype.getEmbeddingsList = function() {
  return /** @type{!Array<!proto.scope.Embedding>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.Embedding, 2));
};


/** @param {!Array<!proto.scope.Embedding>} value */
proto.scope.CellMetaData.prototype.setEmbeddingsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.scope.Embedding=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.Embedding}
 */
proto.scope.CellMetaData.prototype.addEmbeddings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.scope.Embedding, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellMetaData.prototype.clearEmbeddingsList = function() {
  this.setEmbeddingsList([]);
};


/**
 * repeated Clustering clusterings = 3;
 * @return {!Array<!proto.scope.Clustering>}
 */
proto.scope.CellMetaData.prototype.getClusteringsList = function() {
  return /** @type{!Array<!proto.scope.Clustering>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.Clustering, 3));
};


/** @param {!Array<!proto.scope.Clustering>} value */
proto.scope.CellMetaData.prototype.setClusteringsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.scope.Clustering=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.Clustering}
 */
proto.scope.CellMetaData.prototype.addClusterings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.scope.Clustering, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellMetaData.prototype.clearClusteringsList = function() {
  this.setClusteringsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.AUCThreshold.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.AUCThreshold.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.AUCThreshold} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.AUCThreshold.toObject = function(includeInstance, msg) {
  var obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    threshold: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.AUCThreshold}
 */
proto.scope.AUCThreshold.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.AUCThreshold;
  return proto.scope.AUCThreshold.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.AUCThreshold} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.AUCThreshold}
 */
proto.scope.AUCThreshold.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.AUCThreshold.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.AUCThreshold.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.AUCThreshold} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.AUCThreshold.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getThreshold();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.scope.AUCThreshold.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.AUCThreshold.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float threshold = 2;
 * @return {number}
 */
proto.scope.AUCThreshold.prototype.getThreshold = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.scope.AUCThreshold.prototype.setThreshold = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.Regulon.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.Regulon.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.Regulon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.Regulon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.Regulon.toObject = function(includeInstance, msg) {
  var obj = {
    genesList: jspb.Message.getRepeatedField(msg, 1),
    autoThresholdsList: jspb.Message.toObjectList(msg.getAutoThresholdsList(),
    proto.scope.AUCThreshold.toObject, includeInstance),
    defaultThreshold: jspb.Message.getFieldWithDefault(msg, 3, ""),
    motifName: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.Regulon}
 */
proto.scope.Regulon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.Regulon;
  return proto.scope.Regulon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.Regulon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.Regulon}
 */
proto.scope.Regulon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addGenes(value);
      break;
    case 2:
      var value = new proto.scope.AUCThreshold;
      reader.readMessage(value,proto.scope.AUCThreshold.deserializeBinaryFromReader);
      msg.addAutoThresholds(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultThreshold(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMotifName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.Regulon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.Regulon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.Regulon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.Regulon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGenesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getAutoThresholdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.scope.AUCThreshold.serializeBinaryToWriter
    );
  }
  f = message.getDefaultThreshold();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMotifName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated string genes = 1;
 * @return {!Array<string>}
 */
proto.scope.Regulon.prototype.getGenesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.scope.Regulon.prototype.setGenesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.Regulon.prototype.addGenes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.Regulon.prototype.clearGenesList = function() {
  this.setGenesList([]);
};


/**
 * repeated AUCThreshold auto_thresholds = 2;
 * @return {!Array<!proto.scope.AUCThreshold>}
 */
proto.scope.Regulon.prototype.getAutoThresholdsList = function() {
  return /** @type{!Array<!proto.scope.AUCThreshold>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.AUCThreshold, 2));
};


/** @param {!Array<!proto.scope.AUCThreshold>} value */
proto.scope.Regulon.prototype.setAutoThresholdsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.scope.AUCThreshold=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.AUCThreshold}
 */
proto.scope.Regulon.prototype.addAutoThresholds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.scope.AUCThreshold, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.Regulon.prototype.clearAutoThresholdsList = function() {
  this.setAutoThresholdsList([]);
};


/**
 * optional string default_threshold = 3;
 * @return {string}
 */
proto.scope.Regulon.prototype.getDefaultThreshold = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.scope.Regulon.prototype.setDefaultThreshold = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string motif_name = 4;
 * @return {string}
 */
proto.scope.Regulon.prototype.getMotifName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.scope.Regulon.prototype.setMotifName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.FileMetaData.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.FileMetaData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.FileMetaData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.FileMetaData.toObject = function(includeInstance, msg) {
  var obj = {
    hasRegulonsAuc: jspb.Message.getFieldWithDefault(msg, 1, false),
    hasGeneSets: jspb.Message.getFieldWithDefault(msg, 2, false),
    hasClusterings: jspb.Message.getFieldWithDefault(msg, 3, false),
    hasExtraEmbeddings: jspb.Message.getFieldWithDefault(msg, 4, false),
    hasGlobalMeta: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.FileMetaData}
 */
proto.scope.FileMetaData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.FileMetaData;
  return proto.scope.FileMetaData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.FileMetaData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.FileMetaData}
 */
proto.scope.FileMetaData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasRegulonsAuc(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasGeneSets(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasClusterings(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasExtraEmbeddings(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasGlobalMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.FileMetaData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.FileMetaData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.FileMetaData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.FileMetaData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHasRegulonsAuc();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getHasGeneSets();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getHasClusterings();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getHasExtraEmbeddings();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getHasGlobalMeta();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bool has_regulons_auc = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.FileMetaData.prototype.getHasRegulonsAuc = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.scope.FileMetaData.prototype.setHasRegulonsAuc = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool has_gene_sets = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.FileMetaData.prototype.getHasGeneSets = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.scope.FileMetaData.prototype.setHasGeneSets = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool has_clusterings = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.FileMetaData.prototype.getHasClusterings = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.scope.FileMetaData.prototype.setHasClusterings = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool has_extra_embeddings = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.FileMetaData.prototype.getHasExtraEmbeddings = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.scope.FileMetaData.prototype.setHasExtraEmbeddings = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool has_global_meta = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.FileMetaData.prototype.getHasGlobalMeta = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.scope.FileMetaData.prototype.setHasGlobalMeta = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.FeatureValues.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.FeatureValues.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.FeatureValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.FeatureValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.FeatureValues.toObject = function(includeInstance, msg) {
  var obj = {
    featuresList: jspb.Message.getRepeatedFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.FeatureValues}
 */
proto.scope.FeatureValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.FeatureValues;
  return proto.scope.FeatureValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.FeatureValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.FeatureValues}
 */
proto.scope.FeatureValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setFeaturesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.FeatureValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.FeatureValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.FeatureValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.FeatureValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float features = 1;
 * @return {!Array<number>}
 */
proto.scope.FeatureValues.prototype.getFeaturesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array<number>} value */
proto.scope.FeatureValues.prototype.setFeaturesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.FeatureValues.prototype.addFeatures = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.FeatureValues.prototype.clearFeaturesList = function() {
  this.setFeaturesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.CellAnnotations.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.CellAnnotations.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.CellAnnotations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.CellAnnotations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellAnnotations.toObject = function(includeInstance, msg) {
  var obj = {
    annotationsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.CellAnnotations}
 */
proto.scope.CellAnnotations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.CellAnnotations;
  return proto.scope.CellAnnotations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.CellAnnotations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.CellAnnotations}
 */
proto.scope.CellAnnotations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAnnotations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.CellAnnotations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.CellAnnotations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.CellAnnotations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellAnnotations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnnotationsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string annotations = 1;
 * @return {!Array<string>}
 */
proto.scope.CellAnnotations.prototype.getAnnotationsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.scope.CellAnnotations.prototype.setAnnotationsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.CellAnnotations.prototype.addAnnotations = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellAnnotations.prototype.clearAnnotationsList = function() {
  this.setAnnotationsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.CellClusters.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.CellClusters.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.CellClusters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.CellClusters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellClusters.toObject = function(includeInstance, msg) {
  var obj = {
    clustersList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.CellClusters}
 */
proto.scope.CellClusters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.CellClusters;
  return proto.scope.CellClusters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.CellClusters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.CellClusters}
 */
proto.scope.CellClusters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setClustersList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.CellClusters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.CellClusters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.CellClusters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellClusters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClustersList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 clusters = 1;
 * @return {!Array<number>}
 */
proto.scope.CellClusters.prototype.getClustersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.scope.CellClusters.prototype.setClustersList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.CellClusters.prototype.addClusters = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellClusters.prototype.clearClustersList = function() {
  this.setClustersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.CellMetaDataReply.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.CellMetaDataReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.CellMetaDataReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.CellMetaDataReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellMetaDataReply.toObject = function(includeInstance, msg) {
  var obj = {
    clusterIdsList: jspb.Message.toObjectList(msg.getClusterIdsList(),
    proto.scope.CellClusters.toObject, includeInstance),
    geneExpressionList: jspb.Message.toObjectList(msg.getGeneExpressionList(),
    proto.scope.FeatureValues.toObject, includeInstance),
    aucValuesList: jspb.Message.toObjectList(msg.getAucValuesList(),
    proto.scope.FeatureValues.toObject, includeInstance),
    annotationsList: jspb.Message.toObjectList(msg.getAnnotationsList(),
    proto.scope.CellAnnotations.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.CellMetaDataReply}
 */
proto.scope.CellMetaDataReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.CellMetaDataReply;
  return proto.scope.CellMetaDataReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.CellMetaDataReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.CellMetaDataReply}
 */
proto.scope.CellMetaDataReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scope.CellClusters;
      reader.readMessage(value,proto.scope.CellClusters.deserializeBinaryFromReader);
      msg.addClusterIds(value);
      break;
    case 2:
      var value = new proto.scope.FeatureValues;
      reader.readMessage(value,proto.scope.FeatureValues.deserializeBinaryFromReader);
      msg.addGeneExpression(value);
      break;
    case 3:
      var value = new proto.scope.FeatureValues;
      reader.readMessage(value,proto.scope.FeatureValues.deserializeBinaryFromReader);
      msg.addAucValues(value);
      break;
    case 4:
      var value = new proto.scope.CellAnnotations;
      reader.readMessage(value,proto.scope.CellAnnotations.deserializeBinaryFromReader);
      msg.addAnnotations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.CellMetaDataReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.CellMetaDataReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.CellMetaDataReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellMetaDataReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterIdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.scope.CellClusters.serializeBinaryToWriter
    );
  }
  f = message.getGeneExpressionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.scope.FeatureValues.serializeBinaryToWriter
    );
  }
  f = message.getAucValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.scope.FeatureValues.serializeBinaryToWriter
    );
  }
  f = message.getAnnotationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.scope.CellAnnotations.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CellClusters cluster_ids = 1;
 * @return {!Array<!proto.scope.CellClusters>}
 */
proto.scope.CellMetaDataReply.prototype.getClusterIdsList = function() {
  return /** @type{!Array<!proto.scope.CellClusters>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.CellClusters, 1));
};


/** @param {!Array<!proto.scope.CellClusters>} value */
proto.scope.CellMetaDataReply.prototype.setClusterIdsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.scope.CellClusters=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.CellClusters}
 */
proto.scope.CellMetaDataReply.prototype.addClusterIds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.scope.CellClusters, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellMetaDataReply.prototype.clearClusterIdsList = function() {
  this.setClusterIdsList([]);
};


/**
 * repeated FeatureValues gene_expression = 2;
 * @return {!Array<!proto.scope.FeatureValues>}
 */
proto.scope.CellMetaDataReply.prototype.getGeneExpressionList = function() {
  return /** @type{!Array<!proto.scope.FeatureValues>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.FeatureValues, 2));
};


/** @param {!Array<!proto.scope.FeatureValues>} value */
proto.scope.CellMetaDataReply.prototype.setGeneExpressionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.scope.FeatureValues=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.FeatureValues}
 */
proto.scope.CellMetaDataReply.prototype.addGeneExpression = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.scope.FeatureValues, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellMetaDataReply.prototype.clearGeneExpressionList = function() {
  this.setGeneExpressionList([]);
};


/**
 * repeated FeatureValues auc_values = 3;
 * @return {!Array<!proto.scope.FeatureValues>}
 */
proto.scope.CellMetaDataReply.prototype.getAucValuesList = function() {
  return /** @type{!Array<!proto.scope.FeatureValues>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.FeatureValues, 3));
};


/** @param {!Array<!proto.scope.FeatureValues>} value */
proto.scope.CellMetaDataReply.prototype.setAucValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.scope.FeatureValues=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.FeatureValues}
 */
proto.scope.CellMetaDataReply.prototype.addAucValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.scope.FeatureValues, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellMetaDataReply.prototype.clearAucValuesList = function() {
  this.setAucValuesList([]);
};


/**
 * repeated CellAnnotations annotations = 4;
 * @return {!Array<!proto.scope.CellAnnotations>}
 */
proto.scope.CellMetaDataReply.prototype.getAnnotationsList = function() {
  return /** @type{!Array<!proto.scope.CellAnnotations>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.CellAnnotations, 4));
};


/** @param {!Array<!proto.scope.CellAnnotations>} value */
proto.scope.CellMetaDataReply.prototype.setAnnotationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.scope.CellAnnotations=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.CellAnnotations}
 */
proto.scope.CellMetaDataReply.prototype.addAnnotations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.scope.CellAnnotations, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellMetaDataReply.prototype.clearAnnotationsList = function() {
  this.setAnnotationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.RegulonMetaDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.RegulonMetaDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.RegulonMetaDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.RegulonMetaDataRequest.toObject = function(includeInstance, msg) {
  var obj = {
    loomFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    regulon: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.RegulonMetaDataRequest}
 */
proto.scope.RegulonMetaDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.RegulonMetaDataRequest;
  return proto.scope.RegulonMetaDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.RegulonMetaDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.RegulonMetaDataRequest}
 */
proto.scope.RegulonMetaDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoomFilePath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegulon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.RegulonMetaDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.RegulonMetaDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.RegulonMetaDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.RegulonMetaDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoomFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegulon();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string loom_file_path = 1;
 * @return {string}
 */
proto.scope.RegulonMetaDataRequest.prototype.getLoomFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.RegulonMetaDataRequest.prototype.setLoomFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string regulon = 2;
 * @return {string}
 */
proto.scope.RegulonMetaDataRequest.prototype.getRegulon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.RegulonMetaDataRequest.prototype.setRegulon = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.RegulonMetaDataReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.RegulonMetaDataReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.RegulonMetaDataReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.RegulonMetaDataReply.toObject = function(includeInstance, msg) {
  var obj = {
    regulonMeta: (f = msg.getRegulonMeta()) && proto.scope.Regulon.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.RegulonMetaDataReply}
 */
proto.scope.RegulonMetaDataReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.RegulonMetaDataReply;
  return proto.scope.RegulonMetaDataReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.RegulonMetaDataReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.RegulonMetaDataReply}
 */
proto.scope.RegulonMetaDataReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scope.Regulon;
      reader.readMessage(value,proto.scope.Regulon.deserializeBinaryFromReader);
      msg.setRegulonMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.RegulonMetaDataReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.RegulonMetaDataReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.RegulonMetaDataReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.RegulonMetaDataReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegulonMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scope.Regulon.serializeBinaryToWriter
    );
  }
};


/**
 * optional Regulon regulon_meta = 1;
 * @return {?proto.scope.Regulon}
 */
proto.scope.RegulonMetaDataReply.prototype.getRegulonMeta = function() {
  return /** @type{?proto.scope.Regulon} */ (
    jspb.Message.getWrapperField(this, proto.scope.Regulon, 1));
};


/** @param {?proto.scope.Regulon|undefined} value */
proto.scope.RegulonMetaDataReply.prototype.setRegulonMeta = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.scope.RegulonMetaDataReply.prototype.clearRegulonMeta = function() {
  this.setRegulonMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scope.RegulonMetaDataReply.prototype.hasRegulonMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.MarkerGenesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.MarkerGenesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.MarkerGenesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MarkerGenesRequest.toObject = function(includeInstance, msg) {
  var obj = {
    loomFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clusteringId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    clusterId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.MarkerGenesRequest}
 */
proto.scope.MarkerGenesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.MarkerGenesRequest;
  return proto.scope.MarkerGenesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.MarkerGenesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.MarkerGenesRequest}
 */
proto.scope.MarkerGenesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoomFilePath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClusteringId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClusterId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.MarkerGenesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.MarkerGenesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.MarkerGenesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MarkerGenesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoomFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClusteringId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getClusterId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string loom_file_path = 1;
 * @return {string}
 */
proto.scope.MarkerGenesRequest.prototype.getLoomFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.MarkerGenesRequest.prototype.setLoomFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 clustering_id = 2;
 * @return {number}
 */
proto.scope.MarkerGenesRequest.prototype.getClusteringId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.scope.MarkerGenesRequest.prototype.setClusteringId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 cluster_id = 3;
 * @return {number}
 */
proto.scope.MarkerGenesRequest.prototype.getClusterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.scope.MarkerGenesRequest.prototype.setClusterId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.MarkerGenesMetric.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.MarkerGenesMetric.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.MarkerGenesMetric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.MarkerGenesMetric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MarkerGenesMetric.toObject = function(includeInstance, msg) {
  var obj = {
    accessor: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    valuesList: jspb.Message.getRepeatedFloatingPointField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.MarkerGenesMetric}
 */
proto.scope.MarkerGenesMetric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.MarkerGenesMetric;
  return proto.scope.MarkerGenesMetric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.MarkerGenesMetric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.MarkerGenesMetric}
 */
proto.scope.MarkerGenesMetric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessor(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.MarkerGenesMetric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.MarkerGenesMetric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.MarkerGenesMetric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MarkerGenesMetric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessor();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      4,
      f
    );
  }
};


/**
 * optional string accessor = 1;
 * @return {string}
 */
proto.scope.MarkerGenesMetric.prototype.getAccessor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.MarkerGenesMetric.prototype.setAccessor = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.scope.MarkerGenesMetric.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.MarkerGenesMetric.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.scope.MarkerGenesMetric.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.scope.MarkerGenesMetric.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated float values = 4;
 * @return {!Array<number>}
 */
proto.scope.MarkerGenesMetric.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/** @param {!Array<number>} value */
proto.scope.MarkerGenesMetric.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.MarkerGenesMetric.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.MarkerGenesMetric.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.MarkerGenesReply.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.MarkerGenesReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.MarkerGenesReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.MarkerGenesReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MarkerGenesReply.toObject = function(includeInstance, msg) {
  var obj = {
    genesList: jspb.Message.getRepeatedField(msg, 1),
    metricsList: jspb.Message.toObjectList(msg.getMetricsList(),
    proto.scope.MarkerGenesMetric.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.MarkerGenesReply}
 */
proto.scope.MarkerGenesReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.MarkerGenesReply;
  return proto.scope.MarkerGenesReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.MarkerGenesReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.MarkerGenesReply}
 */
proto.scope.MarkerGenesReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addGenes(value);
      break;
    case 2:
      var value = new proto.scope.MarkerGenesMetric;
      reader.readMessage(value,proto.scope.MarkerGenesMetric.deserializeBinaryFromReader);
      msg.addMetrics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.MarkerGenesReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.MarkerGenesReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.MarkerGenesReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MarkerGenesReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGenesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getMetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.scope.MarkerGenesMetric.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string genes = 1;
 * @return {!Array<string>}
 */
proto.scope.MarkerGenesReply.prototype.getGenesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.scope.MarkerGenesReply.prototype.setGenesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.MarkerGenesReply.prototype.addGenes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.MarkerGenesReply.prototype.clearGenesList = function() {
  this.setGenesList([]);
};


/**
 * repeated MarkerGenesMetric metrics = 2;
 * @return {!Array<!proto.scope.MarkerGenesMetric>}
 */
proto.scope.MarkerGenesReply.prototype.getMetricsList = function() {
  return /** @type{!Array<!proto.scope.MarkerGenesMetric>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.MarkerGenesMetric, 2));
};


/** @param {!Array<!proto.scope.MarkerGenesMetric>} value */
proto.scope.MarkerGenesReply.prototype.setMetricsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.scope.MarkerGenesMetric=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.MarkerGenesMetric}
 */
proto.scope.MarkerGenesReply.prototype.addMetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.scope.MarkerGenesMetric, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.MarkerGenesReply.prototype.clearMetricsList = function() {
  this.setMetricsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.MyLoomsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.MyLoomsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.MyLoomsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MyLoomsRequest.toObject = function(includeInstance, msg) {
  var obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.MyLoomsRequest}
 */
proto.scope.MyLoomsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.MyLoomsRequest;
  return proto.scope.MyLoomsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.MyLoomsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.MyLoomsRequest}
 */
proto.scope.MyLoomsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.MyLoomsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.MyLoomsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.MyLoomsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MyLoomsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.scope.MyLoomsRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.MyLoomsRequest.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.LoomHeierarchy.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.LoomHeierarchy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.LoomHeierarchy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.LoomHeierarchy.toObject = function(includeInstance, msg) {
  var obj = {
    l1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    l2: jspb.Message.getFieldWithDefault(msg, 2, ""),
    l3: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.LoomHeierarchy}
 */
proto.scope.LoomHeierarchy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.LoomHeierarchy;
  return proto.scope.LoomHeierarchy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.LoomHeierarchy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.LoomHeierarchy}
 */
proto.scope.LoomHeierarchy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setL1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setL2(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setL3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.LoomHeierarchy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.LoomHeierarchy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.LoomHeierarchy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.LoomHeierarchy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getL1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getL2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getL3();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string l1 = 1;
 * @return {string}
 */
proto.scope.LoomHeierarchy.prototype.getL1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.LoomHeierarchy.prototype.setL1 = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string l2 = 2;
 * @return {string}
 */
proto.scope.LoomHeierarchy.prototype.getL2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.LoomHeierarchy.prototype.setL2 = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string l3 = 3;
 * @return {string}
 */
proto.scope.LoomHeierarchy.prototype.getL3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.scope.LoomHeierarchy.prototype.setL3 = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.MyLoom.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.MyLoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.MyLoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MyLoom.toObject = function(includeInstance, msg) {
  var obj = {
    loomFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    loomDisplayName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    loomSize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cellMetaData: (f = msg.getCellMetaData()) && proto.scope.CellMetaData.toObject(includeInstance, f),
    fileMetaData: (f = msg.getFileMetaData()) && proto.scope.FileMetaData.toObject(includeInstance, f),
    loomHierarchy: (f = msg.getLoomHierarchy()) && proto.scope.LoomHeierarchy.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.MyLoom}
 */
proto.scope.MyLoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.MyLoom;
  return proto.scope.MyLoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.MyLoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.MyLoom}
 */
proto.scope.MyLoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoomFilePath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoomDisplayName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLoomSize(value);
      break;
    case 4:
      var value = new proto.scope.CellMetaData;
      reader.readMessage(value,proto.scope.CellMetaData.deserializeBinaryFromReader);
      msg.setCellMetaData(value);
      break;
    case 5:
      var value = new proto.scope.FileMetaData;
      reader.readMessage(value,proto.scope.FileMetaData.deserializeBinaryFromReader);
      msg.setFileMetaData(value);
      break;
    case 6:
      var value = new proto.scope.LoomHeierarchy;
      reader.readMessage(value,proto.scope.LoomHeierarchy.deserializeBinaryFromReader);
      msg.setLoomHierarchy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.MyLoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.MyLoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.MyLoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MyLoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoomFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLoomDisplayName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLoomSize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCellMetaData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.scope.CellMetaData.serializeBinaryToWriter
    );
  }
  f = message.getFileMetaData();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.scope.FileMetaData.serializeBinaryToWriter
    );
  }
  f = message.getLoomHierarchy();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.scope.LoomHeierarchy.serializeBinaryToWriter
    );
  }
};


/**
 * optional string loom_file_path = 1;
 * @return {string}
 */
proto.scope.MyLoom.prototype.getLoomFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.MyLoom.prototype.setLoomFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string loom_display_name = 2;
 * @return {string}
 */
proto.scope.MyLoom.prototype.getLoomDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.MyLoom.prototype.setLoomDisplayName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 loom_size = 3;
 * @return {number}
 */
proto.scope.MyLoom.prototype.getLoomSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.scope.MyLoom.prototype.setLoomSize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional CellMetaData cell_meta_data = 4;
 * @return {?proto.scope.CellMetaData}
 */
proto.scope.MyLoom.prototype.getCellMetaData = function() {
  return /** @type{?proto.scope.CellMetaData} */ (
    jspb.Message.getWrapperField(this, proto.scope.CellMetaData, 4));
};


/** @param {?proto.scope.CellMetaData|undefined} value */
proto.scope.MyLoom.prototype.setCellMetaData = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.scope.MyLoom.prototype.clearCellMetaData = function() {
  this.setCellMetaData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scope.MyLoom.prototype.hasCellMetaData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FileMetaData file_meta_data = 5;
 * @return {?proto.scope.FileMetaData}
 */
proto.scope.MyLoom.prototype.getFileMetaData = function() {
  return /** @type{?proto.scope.FileMetaData} */ (
    jspb.Message.getWrapperField(this, proto.scope.FileMetaData, 5));
};


/** @param {?proto.scope.FileMetaData|undefined} value */
proto.scope.MyLoom.prototype.setFileMetaData = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.scope.MyLoom.prototype.clearFileMetaData = function() {
  this.setFileMetaData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scope.MyLoom.prototype.hasFileMetaData = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional LoomHeierarchy loom_hierarchy = 6;
 * @return {?proto.scope.LoomHeierarchy}
 */
proto.scope.MyLoom.prototype.getLoomHierarchy = function() {
  return /** @type{?proto.scope.LoomHeierarchy} */ (
    jspb.Message.getWrapperField(this, proto.scope.LoomHeierarchy, 6));
};


/** @param {?proto.scope.LoomHeierarchy|undefined} value */
proto.scope.MyLoom.prototype.setLoomHierarchy = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.scope.MyLoom.prototype.clearLoomHierarchy = function() {
  this.setLoomHierarchy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scope.MyLoom.prototype.hasLoomHierarchy = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.MyLoomsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.MyLoomsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.MyLoomsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.MyLoomsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MyLoomsReply.toObject = function(includeInstance, msg) {
  var obj = {
    myLoomsList: jspb.Message.toObjectList(msg.getMyLoomsList(),
    proto.scope.MyLoom.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.MyLoomsReply}
 */
proto.scope.MyLoomsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.MyLoomsReply;
  return proto.scope.MyLoomsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.MyLoomsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.MyLoomsReply}
 */
proto.scope.MyLoomsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scope.MyLoom;
      reader.readMessage(value,proto.scope.MyLoom.deserializeBinaryFromReader);
      msg.addMyLooms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.MyLoomsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.MyLoomsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.MyLoomsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MyLoomsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyLoomsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.scope.MyLoom.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MyLoom my_looms = 1;
 * @return {!Array<!proto.scope.MyLoom>}
 */
proto.scope.MyLoomsReply.prototype.getMyLoomsList = function() {
  return /** @type{!Array<!proto.scope.MyLoom>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.MyLoom, 1));
};


/** @param {!Array<!proto.scope.MyLoom>} value */
proto.scope.MyLoomsReply.prototype.setMyLoomsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.scope.MyLoom=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.MyLoom}
 */
proto.scope.MyLoomsReply.prototype.addMyLooms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.scope.MyLoom, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.MyLoomsReply.prototype.clearMyLoomsList = function() {
  this.setMyLoomsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.TranslateLassoSelectionRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.TranslateLassoSelectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.TranslateLassoSelectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.TranslateLassoSelectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.TranslateLassoSelectionRequest.toObject = function(includeInstance, msg) {
  var obj = {
    srcLoomFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destLoomFilePath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cellIndicesList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.TranslateLassoSelectionRequest}
 */
proto.scope.TranslateLassoSelectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.TranslateLassoSelectionRequest;
  return proto.scope.TranslateLassoSelectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.TranslateLassoSelectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.TranslateLassoSelectionRequest}
 */
proto.scope.TranslateLassoSelectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcLoomFilePath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestLoomFilePath(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setCellIndicesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.TranslateLassoSelectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.TranslateLassoSelectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.TranslateLassoSelectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.TranslateLassoSelectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrcLoomFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestLoomFilePath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCellIndicesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
};


/**
 * optional string src_loom_file_path = 1;
 * @return {string}
 */
proto.scope.TranslateLassoSelectionRequest.prototype.getSrcLoomFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.TranslateLassoSelectionRequest.prototype.setSrcLoomFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dest_loom_file_path = 2;
 * @return {string}
 */
proto.scope.TranslateLassoSelectionRequest.prototype.getDestLoomFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.TranslateLassoSelectionRequest.prototype.setDestLoomFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated int32 cell_indices = 3;
 * @return {!Array<number>}
 */
proto.scope.TranslateLassoSelectionRequest.prototype.getCellIndicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.scope.TranslateLassoSelectionRequest.prototype.setCellIndicesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.TranslateLassoSelectionRequest.prototype.addCellIndices = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.TranslateLassoSelectionRequest.prototype.clearCellIndicesList = function() {
  this.setCellIndicesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.TranslateLassoSelectionReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.TranslateLassoSelectionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.TranslateLassoSelectionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.TranslateLassoSelectionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.TranslateLassoSelectionReply.toObject = function(includeInstance, msg) {
  var obj = {
    cellIndicesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.TranslateLassoSelectionReply}
 */
proto.scope.TranslateLassoSelectionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.TranslateLassoSelectionReply;
  return proto.scope.TranslateLassoSelectionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.TranslateLassoSelectionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.TranslateLassoSelectionReply}
 */
proto.scope.TranslateLassoSelectionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setCellIndicesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.TranslateLassoSelectionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.TranslateLassoSelectionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.TranslateLassoSelectionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.TranslateLassoSelectionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCellIndicesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 cell_indices = 1;
 * @return {!Array<number>}
 */
proto.scope.TranslateLassoSelectionReply.prototype.getCellIndicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.scope.TranslateLassoSelectionReply.prototype.setCellIndicesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.TranslateLassoSelectionReply.prototype.addCellIndices = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.TranslateLassoSelectionReply.prototype.clearCellIndicesList = function() {
  this.setCellIndicesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.CellIDsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.CellIDsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.CellIDsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.CellIDsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellIDsRequest.toObject = function(includeInstance, msg) {
  var obj = {
    loomFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cellIndicesList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.CellIDsRequest}
 */
proto.scope.CellIDsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.CellIDsRequest;
  return proto.scope.CellIDsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.CellIDsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.CellIDsRequest}
 */
proto.scope.CellIDsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoomFilePath(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setCellIndicesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.CellIDsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.CellIDsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.CellIDsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellIDsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoomFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCellIndicesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional string loom_file_path = 1;
 * @return {string}
 */
proto.scope.CellIDsRequest.prototype.getLoomFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.CellIDsRequest.prototype.setLoomFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated int32 cell_indices = 2;
 * @return {!Array<number>}
 */
proto.scope.CellIDsRequest.prototype.getCellIndicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.scope.CellIDsRequest.prototype.setCellIndicesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.CellIDsRequest.prototype.addCellIndices = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellIDsRequest.prototype.clearCellIndicesList = function() {
  this.setCellIndicesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.CellIDsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.CellIDsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.CellIDsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.CellIDsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellIDsReply.toObject = function(includeInstance, msg) {
  var obj = {
    cellIdsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.CellIDsReply}
 */
proto.scope.CellIDsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.CellIDsReply;
  return proto.scope.CellIDsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.CellIDsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.CellIDsReply}
 */
proto.scope.CellIDsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCellIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.CellIDsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.CellIDsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.CellIDsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.CellIDsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCellIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string cell_ids = 1;
 * @return {!Array<string>}
 */
proto.scope.CellIDsReply.prototype.getCellIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.scope.CellIDsReply.prototype.setCellIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.CellIDsReply.prototype.addCellIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.CellIDsReply.prototype.clearCellIdsList = function() {
  this.setCellIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.GeneSetEnrichmentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.GeneSetEnrichmentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.GeneSetEnrichmentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.GeneSetEnrichmentRequest.toObject = function(includeInstance, msg) {
  var obj = {
    loomFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    geneSetFilePath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    method: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.GeneSetEnrichmentRequest}
 */
proto.scope.GeneSetEnrichmentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.GeneSetEnrichmentRequest;
  return proto.scope.GeneSetEnrichmentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.GeneSetEnrichmentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.GeneSetEnrichmentRequest}
 */
proto.scope.GeneSetEnrichmentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoomFilePath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneSetFilePath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.GeneSetEnrichmentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.GeneSetEnrichmentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.GeneSetEnrichmentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.GeneSetEnrichmentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoomFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeneSetFilePath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string loom_file_path = 1;
 * @return {string}
 */
proto.scope.GeneSetEnrichmentRequest.prototype.getLoomFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.GeneSetEnrichmentRequest.prototype.setLoomFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string gene_set_file_path = 2;
 * @return {string}
 */
proto.scope.GeneSetEnrichmentRequest.prototype.getGeneSetFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.GeneSetEnrichmentRequest.prototype.setGeneSetFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string method = 3;
 * @return {string}
 */
proto.scope.GeneSetEnrichmentRequest.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.scope.GeneSetEnrichmentRequest.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.Progress.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.Progress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.Progress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.Progress.toObject = function(includeInstance, msg) {
  var obj = {
    value: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    status: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.Progress}
 */
proto.scope.Progress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.Progress;
  return proto.scope.Progress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.Progress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.Progress}
 */
proto.scope.Progress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.Progress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.Progress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.Progress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.Progress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional float value = 1;
 * @return {number}
 */
proto.scope.Progress.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.scope.Progress.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.scope.Progress.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.Progress.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.GeneSetEnrichmentReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.GeneSetEnrichmentReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.GeneSetEnrichmentReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.GeneSetEnrichmentReply.toObject = function(includeInstance, msg) {
  var obj = {
    progress: (f = msg.getProgress()) && proto.scope.Progress.toObject(includeInstance, f),
    isDone: jspb.Message.getFieldWithDefault(msg, 2, false),
    cellValues: (f = msg.getCellValues()) && proto.scope.CellColorByFeaturesReply.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.GeneSetEnrichmentReply}
 */
proto.scope.GeneSetEnrichmentReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.GeneSetEnrichmentReply;
  return proto.scope.GeneSetEnrichmentReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.GeneSetEnrichmentReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.GeneSetEnrichmentReply}
 */
proto.scope.GeneSetEnrichmentReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scope.Progress;
      reader.readMessage(value,proto.scope.Progress.deserializeBinaryFromReader);
      msg.setProgress(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDone(value);
      break;
    case 3:
      var value = new proto.scope.CellColorByFeaturesReply;
      reader.readMessage(value,proto.scope.CellColorByFeaturesReply.deserializeBinaryFromReader);
      msg.setCellValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.GeneSetEnrichmentReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.GeneSetEnrichmentReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.GeneSetEnrichmentReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.GeneSetEnrichmentReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProgress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scope.Progress.serializeBinaryToWriter
    );
  }
  f = message.getIsDone();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCellValues();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.scope.CellColorByFeaturesReply.serializeBinaryToWriter
    );
  }
};


/**
 * optional Progress progress = 1;
 * @return {?proto.scope.Progress}
 */
proto.scope.GeneSetEnrichmentReply.prototype.getProgress = function() {
  return /** @type{?proto.scope.Progress} */ (
    jspb.Message.getWrapperField(this, proto.scope.Progress, 1));
};


/** @param {?proto.scope.Progress|undefined} value */
proto.scope.GeneSetEnrichmentReply.prototype.setProgress = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.scope.GeneSetEnrichmentReply.prototype.clearProgress = function() {
  this.setProgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scope.GeneSetEnrichmentReply.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_done = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.GeneSetEnrichmentReply.prototype.getIsDone = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.scope.GeneSetEnrichmentReply.prototype.setIsDone = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional CellColorByFeaturesReply cell_values = 3;
 * @return {?proto.scope.CellColorByFeaturesReply}
 */
proto.scope.GeneSetEnrichmentReply.prototype.getCellValues = function() {
  return /** @type{?proto.scope.CellColorByFeaturesReply} */ (
    jspb.Message.getWrapperField(this, proto.scope.CellColorByFeaturesReply, 3));
};


/** @param {?proto.scope.CellColorByFeaturesReply|undefined} value */
proto.scope.GeneSetEnrichmentReply.prototype.setCellValues = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.scope.GeneSetEnrichmentReply.prototype.clearCellValues = function() {
  this.setCellValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scope.GeneSetEnrichmentReply.prototype.hasCellValues = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.VmaxRequest.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.VmaxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.VmaxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.VmaxRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.VmaxRequest.toObject = function(includeInstance, msg) {
  var obj = {
    loomFilePathList: jspb.Message.getRepeatedField(msg, 1),
    featureList: jspb.Message.getRepeatedField(msg, 2),
    featureTypeList: jspb.Message.getRepeatedField(msg, 3),
    hasLogTransform: jspb.Message.getFieldWithDefault(msg, 4, false),
    hasCpmTransform: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.VmaxRequest}
 */
proto.scope.VmaxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.VmaxRequest;
  return proto.scope.VmaxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.VmaxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.VmaxRequest}
 */
proto.scope.VmaxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addLoomFilePath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFeature(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFeatureType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasLogTransform(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasCpmTransform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.VmaxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.VmaxRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.VmaxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.VmaxRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoomFilePathList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getFeatureTypeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getHasLogTransform();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getHasCpmTransform();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * repeated string loom_file_path = 1;
 * @return {!Array<string>}
 */
proto.scope.VmaxRequest.prototype.getLoomFilePathList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.scope.VmaxRequest.prototype.setLoomFilePathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.VmaxRequest.prototype.addLoomFilePath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.VmaxRequest.prototype.clearLoomFilePathList = function() {
  this.setLoomFilePathList([]);
};


/**
 * repeated string feature = 2;
 * @return {!Array<string>}
 */
proto.scope.VmaxRequest.prototype.getFeatureList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.scope.VmaxRequest.prototype.setFeatureList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.VmaxRequest.prototype.addFeature = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.VmaxRequest.prototype.clearFeatureList = function() {
  this.setFeatureList([]);
};


/**
 * repeated string feature_type = 3;
 * @return {!Array<string>}
 */
proto.scope.VmaxRequest.prototype.getFeatureTypeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.scope.VmaxRequest.prototype.setFeatureTypeList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.scope.VmaxRequest.prototype.addFeatureType = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.VmaxRequest.prototype.clearFeatureTypeList = function() {
  this.setFeatureTypeList([]);
};


/**
 * optional bool has_log_transform = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.VmaxRequest.prototype.getHasLogTransform = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.scope.VmaxRequest.prototype.setHasLogTransform = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool has_cpm_transform = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.VmaxRequest.prototype.getHasCpmTransform = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.scope.VmaxRequest.prototype.setHasCpmTransform = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.VmaxReply.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.VmaxReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.VmaxReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.VmaxReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.VmaxReply.toObject = function(includeInstance, msg) {
  var obj = {
    vmaxList: jspb.Message.getRepeatedFloatingPointField(msg, 1),
    maxVmaxList: jspb.Message.getRepeatedFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.VmaxReply}
 */
proto.scope.VmaxReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.VmaxReply;
  return proto.scope.VmaxReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.VmaxReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.VmaxReply}
 */
proto.scope.VmaxReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setVmaxList(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setMaxVmaxList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.VmaxReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.VmaxReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.VmaxReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.VmaxReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVmaxList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = message.getMaxVmaxList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
};


/**
 * repeated float vmax = 1;
 * @return {!Array<number>}
 */
proto.scope.VmaxReply.prototype.getVmaxList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array<number>} value */
proto.scope.VmaxReply.prototype.setVmaxList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.VmaxReply.prototype.addVmax = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.VmaxReply.prototype.clearVmaxList = function() {
  this.setVmaxList([]);
};


/**
 * repeated float max_vmax = 2;
 * @return {!Array<number>}
 */
proto.scope.VmaxReply.prototype.getMaxVmaxList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {!Array<number>} value */
proto.scope.VmaxReply.prototype.setMaxVmaxList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.scope.VmaxReply.prototype.addMaxVmax = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.VmaxReply.prototype.clearMaxVmaxList = function() {
  this.setMaxVmaxList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.UUIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.UUIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.UUIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.UUIDRequest.toObject = function(includeInstance, msg) {
  var obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.UUIDRequest}
 */
proto.scope.UUIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.UUIDRequest;
  return proto.scope.UUIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.UUIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.UUIDRequest}
 */
proto.scope.UUIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.UUIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.UUIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.UUIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.UUIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.scope.UUIDRequest.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.UUIDRequest.prototype.setIp = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.UUIDReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.UUIDReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.UUIDReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.UUIDReply.toObject = function(includeInstance, msg) {
  var obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.UUIDReply}
 */
proto.scope.UUIDReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.UUIDReply;
  return proto.scope.UUIDReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.UUIDReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.UUIDReply}
 */
proto.scope.UUIDReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.UUIDReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.UUIDReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.UUIDReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.UUIDReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string UUID = 1;
 * @return {string}
 */
proto.scope.UUIDReply.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.UUIDReply.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.RemainingUUIDTimeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.RemainingUUIDTimeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.RemainingUUIDTimeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.RemainingUUIDTimeRequest.toObject = function(includeInstance, msg) {
  var obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mouseEvents: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.RemainingUUIDTimeRequest}
 */
proto.scope.RemainingUUIDTimeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.RemainingUUIDTimeRequest;
  return proto.scope.RemainingUUIDTimeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.RemainingUUIDTimeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.RemainingUUIDTimeRequest}
 */
proto.scope.RemainingUUIDTimeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMouseEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.RemainingUUIDTimeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.RemainingUUIDTimeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.RemainingUUIDTimeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.RemainingUUIDTimeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMouseEvents();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.scope.RemainingUUIDTimeRequest.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.RemainingUUIDTimeRequest.prototype.setIp = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.scope.RemainingUUIDTimeRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.RemainingUUIDTimeRequest.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 mouse_events = 3;
 * @return {number}
 */
proto.scope.RemainingUUIDTimeRequest.prototype.getMouseEvents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.scope.RemainingUUIDTimeRequest.prototype.setMouseEvents = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.RemainingUUIDTimeReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.RemainingUUIDTimeReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.RemainingUUIDTimeReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.RemainingUUIDTimeReply.toObject = function(includeInstance, msg) {
  var obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timeRemaining: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sessionsLimitReached: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.RemainingUUIDTimeReply}
 */
proto.scope.RemainingUUIDTimeReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.RemainingUUIDTimeReply;
  return proto.scope.RemainingUUIDTimeReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.RemainingUUIDTimeReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.RemainingUUIDTimeReply}
 */
proto.scope.RemainingUUIDTimeReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeRemaining(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSessionsLimitReached(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.RemainingUUIDTimeReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.RemainingUUIDTimeReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.RemainingUUIDTimeReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.RemainingUUIDTimeReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimeRemaining();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSessionsLimitReached();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string UUID = 1;
 * @return {string}
 */
proto.scope.RemainingUUIDTimeReply.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.RemainingUUIDTimeReply.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 time_remaining = 2;
 * @return {number}
 */
proto.scope.RemainingUUIDTimeReply.prototype.getTimeRemaining = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.scope.RemainingUUIDTimeReply.prototype.setTimeRemaining = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool sessions_limit_Reached = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.RemainingUUIDTimeReply.prototype.getSessionsLimitReached = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.scope.RemainingUUIDTimeReply.prototype.setSessionsLimitReached = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.LoomUploadedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.LoomUploadedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.LoomUploadedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.LoomUploadedRequest.toObject = function(includeInstance, msg) {
  var obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.LoomUploadedRequest}
 */
proto.scope.LoomUploadedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.LoomUploadedRequest;
  return proto.scope.LoomUploadedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.LoomUploadedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.LoomUploadedRequest}
 */
proto.scope.LoomUploadedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.LoomUploadedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.LoomUploadedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.LoomUploadedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.LoomUploadedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.scope.LoomUploadedRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.LoomUploadedRequest.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string filename = 2;
 * @return {string}
 */
proto.scope.LoomUploadedRequest.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.LoomUploadedRequest.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.LoomUploadedReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.LoomUploadedReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.LoomUploadedReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.LoomUploadedReply.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.LoomUploadedReply}
 */
proto.scope.LoomUploadedReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.LoomUploadedReply;
  return proto.scope.LoomUploadedReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.LoomUploadedReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.LoomUploadedReply}
 */
proto.scope.LoomUploadedReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.LoomUploadedReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.LoomUploadedReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.LoomUploadedReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.LoomUploadedReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.MyGeneSet.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.MyGeneSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.MyGeneSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MyGeneSet.toObject = function(includeInstance, msg) {
  var obj = {
    geneSetFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    geneSetDisplayName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.MyGeneSet}
 */
proto.scope.MyGeneSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.MyGeneSet;
  return proto.scope.MyGeneSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.MyGeneSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.MyGeneSet}
 */
proto.scope.MyGeneSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneSetFilePath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneSetDisplayName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.MyGeneSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.MyGeneSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.MyGeneSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MyGeneSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeneSetFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeneSetDisplayName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string gene_set_file_path = 1;
 * @return {string}
 */
proto.scope.MyGeneSet.prototype.getGeneSetFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.MyGeneSet.prototype.setGeneSetFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string gene_set_display_name = 2;
 * @return {string}
 */
proto.scope.MyGeneSet.prototype.getGeneSetDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.MyGeneSet.prototype.setGeneSetDisplayName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.MyGeneSetsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.MyGeneSetsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.MyGeneSetsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MyGeneSetsRequest.toObject = function(includeInstance, msg) {
  var obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.MyGeneSetsRequest}
 */
proto.scope.MyGeneSetsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.MyGeneSetsRequest;
  return proto.scope.MyGeneSetsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.MyGeneSetsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.MyGeneSetsRequest}
 */
proto.scope.MyGeneSetsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.MyGeneSetsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.MyGeneSetsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.MyGeneSetsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MyGeneSetsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.scope.MyGeneSetsRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.MyGeneSetsRequest.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scope.MyGeneSetsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.MyGeneSetsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.MyGeneSetsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.MyGeneSetsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MyGeneSetsReply.toObject = function(includeInstance, msg) {
  var obj = {
    myGeneSetsList: jspb.Message.toObjectList(msg.getMyGeneSetsList(),
    proto.scope.MyGeneSet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.MyGeneSetsReply}
 */
proto.scope.MyGeneSetsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.MyGeneSetsReply;
  return proto.scope.MyGeneSetsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.MyGeneSetsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.MyGeneSetsReply}
 */
proto.scope.MyGeneSetsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scope.MyGeneSet;
      reader.readMessage(value,proto.scope.MyGeneSet.deserializeBinaryFromReader);
      msg.addMyGeneSets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.MyGeneSetsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.MyGeneSetsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.MyGeneSetsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.MyGeneSetsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyGeneSetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.scope.MyGeneSet.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MyGeneSet my_gene_sets = 1;
 * @return {!Array<!proto.scope.MyGeneSet>}
 */
proto.scope.MyGeneSetsReply.prototype.getMyGeneSetsList = function() {
  return /** @type{!Array<!proto.scope.MyGeneSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scope.MyGeneSet, 1));
};


/** @param {!Array<!proto.scope.MyGeneSet>} value */
proto.scope.MyGeneSetsReply.prototype.setMyGeneSetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.scope.MyGeneSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scope.MyGeneSet}
 */
proto.scope.MyGeneSetsReply.prototype.addMyGeneSets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.scope.MyGeneSet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.scope.MyGeneSetsReply.prototype.clearMyGeneSetsList = function() {
  this.setMyGeneSetsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.DeleteUserFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.DeleteUserFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.DeleteUserFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.DeleteUserFileRequest.toObject = function(includeInstance, msg) {
  var obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filePath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fileType: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.DeleteUserFileRequest}
 */
proto.scope.DeleteUserFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.DeleteUserFileRequest;
  return proto.scope.DeleteUserFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.DeleteUserFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.DeleteUserFileRequest}
 */
proto.scope.DeleteUserFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilePath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.DeleteUserFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.DeleteUserFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.DeleteUserFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.DeleteUserFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilePath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFileType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.scope.DeleteUserFileRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.DeleteUserFileRequest.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string file_path = 2;
 * @return {string}
 */
proto.scope.DeleteUserFileRequest.prototype.getFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.DeleteUserFileRequest.prototype.setFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string file_type = 3;
 * @return {string}
 */
proto.scope.DeleteUserFileRequest.prototype.getFileType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.scope.DeleteUserFileRequest.prototype.setFileType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.DeleteUserFileReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.DeleteUserFileReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.DeleteUserFileReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.DeleteUserFileReply.toObject = function(includeInstance, msg) {
  var obj = {
    deletedSuccessfully: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.DeleteUserFileReply}
 */
proto.scope.DeleteUserFileReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.DeleteUserFileReply;
  return proto.scope.DeleteUserFileReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.DeleteUserFileReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.DeleteUserFileReply}
 */
proto.scope.DeleteUserFileReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeletedSuccessfully(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.DeleteUserFileReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.DeleteUserFileReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.DeleteUserFileReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.DeleteUserFileReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeletedSuccessfully();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool deleted_successfully = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.DeleteUserFileReply.prototype.getDeletedSuccessfully = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.scope.DeleteUserFileReply.prototype.setDeletedSuccessfully = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.DownloadSubLoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.DownloadSubLoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.DownloadSubLoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.DownloadSubLoomRequest.toObject = function(includeInstance, msg) {
  var obj = {
    loomFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    featureType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    featureName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    featureValue: jspb.Message.getFieldWithDefault(msg, 4, ""),
    operator: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.DownloadSubLoomRequest}
 */
proto.scope.DownloadSubLoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.DownloadSubLoomRequest;
  return proto.scope.DownloadSubLoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.DownloadSubLoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.DownloadSubLoomRequest}
 */
proto.scope.DownloadSubLoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoomFilePath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureValue(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.DownloadSubLoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.DownloadSubLoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.DownloadSubLoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.DownloadSubLoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoomFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeatureType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFeatureName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFeatureValue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOperator();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string loom_file_path = 1;
 * @return {string}
 */
proto.scope.DownloadSubLoomRequest.prototype.getLoomFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.DownloadSubLoomRequest.prototype.setLoomFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string feature_type = 2;
 * @return {string}
 */
proto.scope.DownloadSubLoomRequest.prototype.getFeatureType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scope.DownloadSubLoomRequest.prototype.setFeatureType = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string feature_name = 3;
 * @return {string}
 */
proto.scope.DownloadSubLoomRequest.prototype.getFeatureName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.scope.DownloadSubLoomRequest.prototype.setFeatureName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string feature_value = 4;
 * @return {string}
 */
proto.scope.DownloadSubLoomRequest.prototype.getFeatureValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.scope.DownloadSubLoomRequest.prototype.setFeatureValue = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string operator = 5;
 * @return {string}
 */
proto.scope.DownloadSubLoomRequest.prototype.getOperator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.scope.DownloadSubLoomRequest.prototype.setOperator = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scope.DownloadSubLoomReply.prototype.toObject = function(opt_includeInstance) {
  return proto.scope.DownloadSubLoomReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scope.DownloadSubLoomReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.DownloadSubLoomReply.toObject = function(includeInstance, msg) {
  var obj = {
    loomFilePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    loomFileSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    progress: (f = msg.getProgress()) && proto.scope.Progress.toObject(includeInstance, f),
    isDone: jspb.Message.getFieldWithDefault(msg, 4, false),
    error: (f = msg.getError()) && proto.scope.ErrorReply.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scope.DownloadSubLoomReply}
 */
proto.scope.DownloadSubLoomReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scope.DownloadSubLoomReply;
  return proto.scope.DownloadSubLoomReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scope.DownloadSubLoomReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scope.DownloadSubLoomReply}
 */
proto.scope.DownloadSubLoomReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoomFilePath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLoomFileSize(value);
      break;
    case 3:
      var value = new proto.scope.Progress;
      reader.readMessage(value,proto.scope.Progress.deserializeBinaryFromReader);
      msg.setProgress(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDone(value);
      break;
    case 5:
      var value = new proto.scope.ErrorReply;
      reader.readMessage(value,proto.scope.ErrorReply.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scope.DownloadSubLoomReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scope.DownloadSubLoomReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scope.DownloadSubLoomReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scope.DownloadSubLoomReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoomFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLoomFileSize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getProgress();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.scope.Progress.serializeBinaryToWriter
    );
  }
  f = message.getIsDone();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.scope.ErrorReply.serializeBinaryToWriter
    );
  }
};


/**
 * optional string loom_file_path = 1;
 * @return {string}
 */
proto.scope.DownloadSubLoomReply.prototype.getLoomFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scope.DownloadSubLoomReply.prototype.setLoomFilePath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 loom_file_size = 2;
 * @return {number}
 */
proto.scope.DownloadSubLoomReply.prototype.getLoomFileSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.scope.DownloadSubLoomReply.prototype.setLoomFileSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Progress progress = 3;
 * @return {?proto.scope.Progress}
 */
proto.scope.DownloadSubLoomReply.prototype.getProgress = function() {
  return /** @type{?proto.scope.Progress} */ (
    jspb.Message.getWrapperField(this, proto.scope.Progress, 3));
};


/** @param {?proto.scope.Progress|undefined} value */
proto.scope.DownloadSubLoomReply.prototype.setProgress = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.scope.DownloadSubLoomReply.prototype.clearProgress = function() {
  this.setProgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scope.DownloadSubLoomReply.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool is_done = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.scope.DownloadSubLoomReply.prototype.getIsDone = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.scope.DownloadSubLoomReply.prototype.setIsDone = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional ErrorReply error = 5;
 * @return {?proto.scope.ErrorReply}
 */
proto.scope.DownloadSubLoomReply.prototype.getError = function() {
  return /** @type{?proto.scope.ErrorReply} */ (
    jspb.Message.getWrapperField(this, proto.scope.ErrorReply, 5));
};


/** @param {?proto.scope.ErrorReply|undefined} value */
proto.scope.DownloadSubLoomReply.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.scope.DownloadSubLoomReply.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scope.DownloadSubLoomReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.scope);
